
Level9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dfc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002f84  08002f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fb4  08002fb4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002fb4  08002fb4  00012fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fbc  08002fbc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fbc  08002fbc  00012fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fc0  08002fc0  00012fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000011c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000012c  2000012c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007c74  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001858  00000000  00000000  00027cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007f0  00000000  00000000  00029550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005ea  00000000  00000000  00029d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e5e9  00000000  00000000  0002a32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009626  00000000  00000000  00048913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ba338  00000000  00000000  00051f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001fa8  00000000  00000000  0010c274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0010e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f6c 	.word	0x08002f6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002f6c 	.word	0x08002f6c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fd82 	bl	8000fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f900 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fa58 	bl	8000984 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004d4:	f000 f966 	bl	80007a4 <MX_CAN1_Init>
  MX_CAN2_Init();
 80004d8:	f000 f99a 	bl	8000810 <MX_CAN2_Init>
  MX_RTC_Init();
 80004dc:	f000 f9ce 	bl	800087c <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	lcd_init();
 80004e0:	f000 fada 	bl	8000a98 <lcd_init>
	HAL_Delay(500);
 80004e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e8:	f000 fde4 	bl	80010b4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, STB1_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2101      	movs	r1, #1
 80004f0:	4865      	ldr	r0, [pc, #404]	; (8000688 <main+0x1c4>)
 80004f2:	f001 fc93 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, STB2_Pin, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2108      	movs	r1, #8
 80004fa:	4863      	ldr	r0, [pc, #396]	; (8000688 <main+0x1c4>)
 80004fc:	f001 fc8e 	bl	8001e1c <HAL_GPIO_WritePin>

	p1header.DLC=8;
 8000500:	4b62      	ldr	r3, [pc, #392]	; (800068c <main+0x1c8>)
 8000502:	2208      	movs	r2, #8
 8000504:	611a      	str	r2, [r3, #16]
	p1header.IDE=CAN_ID_STD;
 8000506:	4b61      	ldr	r3, [pc, #388]	; (800068c <main+0x1c8>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
	p1header.StdId=0x001;
 800050c:	4b5f      	ldr	r3, [pc, #380]	; (800068c <main+0x1c8>)
 800050e:	2201      	movs	r2, #1
 8000510:	601a      	str	r2, [r3, #0]
	p1header.RTR=CAN_RTR_DATA;
 8000512:	4b5e      	ldr	r3, [pc, #376]	; (800068c <main+0x1c8>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]

	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8000518:	4b5d      	ldr	r3, [pc, #372]	; (8000690 <main+0x1cc>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh=0x00C;
 800051e:	4b5c      	ldr	r3, [pc, #368]	; (8000690 <main+0x1cc>)
 8000520:	220c      	movs	r2, #12
 8000522:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow =0x00A;
 8000524:	4b5a      	ldr	r3, [pc, #360]	; (8000690 <main+0x1cc>)
 8000526:	220a      	movs	r2, #10
 8000528:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh=0;
 800052a:	4b59      	ldr	r3, [pc, #356]	; (8000690 <main+0x1cc>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow=0;
 8000530:	4b57      	ldr	r3, [pc, #348]	; (8000690 <main+0x1cc>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000536:	4b56      	ldr	r3, [pc, #344]	; (8000690 <main+0x1cc>)
 8000538:	2201      	movs	r2, #1
 800053a:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation=ENABLE;
 800053c:	4b54      	ldr	r3, [pc, #336]	; (8000690 <main+0x1cc>)
 800053e:	2201      	movs	r2, #1
 8000540:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig);
 8000542:	4953      	ldr	r1, [pc, #332]	; (8000690 <main+0x1cc>)
 8000544:	4853      	ldr	r0, [pc, #332]	; (8000694 <main+0x1d0>)
 8000546:	f000 fed5 	bl	80012f4 <HAL_CAN_ConfigFilter>
	HAL_CAN_ConfigFilter(&hcan2,&sFilterConfig);
 800054a:	4951      	ldr	r1, [pc, #324]	; (8000690 <main+0x1cc>)
 800054c:	4852      	ldr	r0, [pc, #328]	; (8000698 <main+0x1d4>)
 800054e:	f000 fed1 	bl	80012f4 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan1);
 8000552:	4850      	ldr	r0, [pc, #320]	; (8000694 <main+0x1d0>)
 8000554:	f000 ffae 	bl	80014b4 <HAL_CAN_Start>
	HAL_CAN_Start(&hcan2);
 8000558:	484f      	ldr	r0, [pc, #316]	; (8000698 <main+0x1d4>)
 800055a:	f000 ffab 	bl	80014b4 <HAL_CAN_Start>

  while (1)
  {
	HAL_RTC_GetTime(&hrtc,&gTime,RTC_FORMAT_BIN);
 800055e:	2200      	movs	r2, #0
 8000560:	494e      	ldr	r1, [pc, #312]	; (800069c <main+0x1d8>)
 8000562:	484f      	ldr	r0, [pc, #316]	; (80006a0 <main+0x1dc>)
 8000564:	f002 fa8a 	bl	8002a7c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&gDate,RTC_FORMAT_BIN);
 8000568:	2200      	movs	r2, #0
 800056a:	494e      	ldr	r1, [pc, #312]	; (80006a4 <main+0x1e0>)
 800056c:	484c      	ldr	r0, [pc, #304]	; (80006a0 <main+0x1dc>)
 800056e:	f002 fb67 	bl	8002c40 <HAL_RTC_GetDate>
	aData[0]=gTime.Hours;
 8000572:	4b4a      	ldr	r3, [pc, #296]	; (800069c <main+0x1d8>)
 8000574:	781a      	ldrb	r2, [r3, #0]
 8000576:	4b4c      	ldr	r3, [pc, #304]	; (80006a8 <main+0x1e4>)
 8000578:	701a      	strb	r2, [r3, #0]
	aData[1]=gTime.Minutes;
 800057a:	4b48      	ldr	r3, [pc, #288]	; (800069c <main+0x1d8>)
 800057c:	785a      	ldrb	r2, [r3, #1]
 800057e:	4b4a      	ldr	r3, [pc, #296]	; (80006a8 <main+0x1e4>)
 8000580:	705a      	strb	r2, [r3, #1]
	aData[2]=gTime.Seconds;
 8000582:	4b46      	ldr	r3, [pc, #280]	; (800069c <main+0x1d8>)
 8000584:	789a      	ldrb	r2, [r3, #2]
 8000586:	4b48      	ldr	r3, [pc, #288]	; (80006a8 <main+0x1e4>)
 8000588:	709a      	strb	r2, [r3, #2]

	aData[3]=gDate.WeekDay;
 800058a:	4b46      	ldr	r3, [pc, #280]	; (80006a4 <main+0x1e0>)
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	4b46      	ldr	r3, [pc, #280]	; (80006a8 <main+0x1e4>)
 8000590:	70da      	strb	r2, [r3, #3]
	aData[4]=gDate.Date;
 8000592:	4b44      	ldr	r3, [pc, #272]	; (80006a4 <main+0x1e0>)
 8000594:	789a      	ldrb	r2, [r3, #2]
 8000596:	4b44      	ldr	r3, [pc, #272]	; (80006a8 <main+0x1e4>)
 8000598:	711a      	strb	r2, [r3, #4]
	aData[5]=gDate.Month;
 800059a:	4b42      	ldr	r3, [pc, #264]	; (80006a4 <main+0x1e0>)
 800059c:	785a      	ldrb	r2, [r3, #1]
 800059e:	4b42      	ldr	r3, [pc, #264]	; (80006a8 <main+0x1e4>)
 80005a0:	715a      	strb	r2, [r3, #5]
	aData[6]=gDate.Year;
 80005a2:	4b40      	ldr	r3, [pc, #256]	; (80006a4 <main+0x1e0>)
 80005a4:	78da      	ldrb	r2, [r3, #3]
 80005a6:	4b40      	ldr	r3, [pc, #256]	; (80006a8 <main+0x1e4>)
 80005a8:	719a      	strb	r2, [r3, #6]
	aData[7]=00;
 80005aa:	4b3f      	ldr	r3, [pc, #252]	; (80006a8 <main+0x1e4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(&hcan2,&p1header,aData,&pTxMailbox);
 80005b0:	4b3e      	ldr	r3, [pc, #248]	; (80006ac <main+0x1e8>)
 80005b2:	4a3d      	ldr	r2, [pc, #244]	; (80006a8 <main+0x1e4>)
 80005b4:	4935      	ldr	r1, [pc, #212]	; (800068c <main+0x1c8>)
 80005b6:	4838      	ldr	r0, [pc, #224]	; (8000698 <main+0x1d4>)
 80005b8:	f000 ffc0 	bl	800153c <HAL_CAN_AddTxMessage>
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0,&p2header,received_data);
 80005bc:	4b3c      	ldr	r3, [pc, #240]	; (80006b0 <main+0x1ec>)
 80005be:	4a3d      	ldr	r2, [pc, #244]	; (80006b4 <main+0x1f0>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	4834      	ldr	r0, [pc, #208]	; (8000694 <main+0x1d0>)
 80005c4:	f001 f895 	bl	80016f2 <HAL_CAN_GetRxMessage>
	Can_id = p1header.StdId;
 80005c8:	4b30      	ldr	r3, [pc, #192]	; (800068c <main+0x1c8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b3a      	ldr	r3, [pc, #232]	; (80006b8 <main+0x1f4>)
 80005d0:	701a      	strb	r2, [r3, #0]
	cmd(0x80);
 80005d2:	2080      	movs	r0, #128	; 0x80
 80005d4:	f000 fa76 	bl	8000ac4 <cmd>
	display("VIETNAM");
 80005d8:	4838      	ldr	r0, [pc, #224]	; (80006bc <main+0x1f8>)
 80005da:	f000 fb53 	bl	8000c84 <display>
	cmd(0xc0);
 80005de:	20c0      	movs	r0, #192	; 0xc0
 80005e0:	f000 fa70 	bl	8000ac4 <cmd>
	display("TIME");
 80005e4:	4836      	ldr	r0, [pc, #216]	; (80006c0 <main+0x1fc>)
 80005e6:	f000 fb4d 	bl	8000c84 <display>
	cmd(0xc5);
 80005ea:	20c5      	movs	r0, #197	; 0xc5
 80005ec:	f000 fa6a 	bl	8000ac4 <cmd>
	Time(received_data[0]);
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <main+0x1ec>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fb5d 	bl	8000cb4 <Time>
	cmd(0xc7);
 80005fa:	20c7      	movs	r0, #199	; 0xc7
 80005fc:	f000 fa62 	bl	8000ac4 <cmd>
	display(":");
 8000600:	4830      	ldr	r0, [pc, #192]	; (80006c4 <main+0x200>)
 8000602:	f000 fb3f 	bl	8000c84 <display>
	cmd(0xc8);
 8000606:	20c8      	movs	r0, #200	; 0xc8
 8000608:	f000 fa5c 	bl	8000ac4 <cmd>
	Time(received_data[1]);
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <main+0x1ec>)
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fb4f 	bl	8000cb4 <Time>
	cmd(0xca);
 8000616:	20ca      	movs	r0, #202	; 0xca
 8000618:	f000 fa54 	bl	8000ac4 <cmd>
	display(":");
 800061c:	4829      	ldr	r0, [pc, #164]	; (80006c4 <main+0x200>)
 800061e:	f000 fb31 	bl	8000c84 <display>
	cmd(0xcb);
 8000622:	20cb      	movs	r0, #203	; 0xcb
 8000624:	f000 fa4e 	bl	8000ac4 <cmd>
	Time(received_data[2]);
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <main+0x1ec>)
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fb41 	bl	8000cb4 <Time>

	cmd(0x94);
 8000632:	2094      	movs	r0, #148	; 0x94
 8000634:	f000 fa46 	bl	8000ac4 <cmd>
	display("DATE");
 8000638:	4823      	ldr	r0, [pc, #140]	; (80006c8 <main+0x204>)
 800063a:	f000 fb23 	bl	8000c84 <display>
	cmd(0x99);
 800063e:	2099      	movs	r0, #153	; 0x99
 8000640:	f000 fa40 	bl	8000ac4 <cmd>
	Time(received_data[4]);
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <main+0x1ec>)
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fb33 	bl	8000cb4 <Time>
	cmd(0x9b);
 800064e:	209b      	movs	r0, #155	; 0x9b
 8000650:	f000 fa38 	bl	8000ac4 <cmd>
	display("/");
 8000654:	481d      	ldr	r0, [pc, #116]	; (80006cc <main+0x208>)
 8000656:	f000 fb15 	bl	8000c84 <display>
	cmd(0x9c);
 800065a:	209c      	movs	r0, #156	; 0x9c
 800065c:	f000 fa32 	bl	8000ac4 <cmd>
	Time(received_data[5]);
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <main+0x1ec>)
 8000662:	795b      	ldrb	r3, [r3, #5]
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fb25 	bl	8000cb4 <Time>
	cmd(0x9e);
 800066a:	209e      	movs	r0, #158	; 0x9e
 800066c:	f000 fa2a 	bl	8000ac4 <cmd>
	display("/");
 8000670:	4816      	ldr	r0, [pc, #88]	; (80006cc <main+0x208>)
 8000672:	f000 fb07 	bl	8000c84 <display>
	cmd(0x9f);
 8000676:	209f      	movs	r0, #159	; 0x9f
 8000678:	f000 fa24 	bl	8000ac4 <cmd>
	Time(received_data[6]);
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <main+0x1ec>)
 800067e:	799b      	ldrb	r3, [r3, #6]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fb17 	bl	8000cb4 <Time>
	HAL_RTC_GetTime(&hrtc,&gTime,RTC_FORMAT_BIN);
 8000686:	e76a      	b.n	800055e <main+0x9a>
 8000688:	40020800 	.word	0x40020800
 800068c:	2000009c 	.word	0x2000009c
 8000690:	200000d0 	.word	0x200000d0
 8000694:	2000002c 	.word	0x2000002c
 8000698:	20000054 	.word	0x20000054
 800069c:	2000010c 	.word	0x2000010c
 80006a0:	2000007c 	.word	0x2000007c
 80006a4:	20000120 	.word	0x20000120
 80006a8:	200000f8 	.word	0x200000f8
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000100 	.word	0x20000100
 80006b4:	200000b4 	.word	0x200000b4
 80006b8:	20000108 	.word	0x20000108
 80006bc:	08002f84 	.word	0x08002f84
 80006c0:	08002f8c 	.word	0x08002f8c
 80006c4:	08002f94 	.word	0x08002f94
 80006c8:	08002f98 	.word	0x08002f98
 80006cc:	08002fa0 	.word	0x08002fa0

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	; 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fc17 	bl	8002f12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b28      	ldr	r3, [pc, #160]	; (800079c <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a27      	ldr	r2, [pc, #156]	; (800079c <SystemClock_Config+0xcc>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemClock_Config+0xcc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemClock_Config+0xd0>)
 800071a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <SystemClock_Config+0xd0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800072c:	230a      	movs	r3, #10
 800072e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	2310      	movs	r3, #16
 8000736:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000748:	2348      	movs	r3, #72	; 0x48
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800074c:	2306      	movs	r3, #6
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fb79 	bl	8001e50 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000764:	f000 fad8 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f001 fddc 	bl	8002340 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800078e:	f000 fac3 	bl	8000d18 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3750      	adds	r7, #80	; 0x50
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_CAN1_Init+0x64>)
 80007aa:	4a18      	ldr	r2, [pc, #96]	; (800080c <MX_CAN1_Init+0x68>)
 80007ac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_CAN1_Init+0x64>)
 80007b0:	2208      	movs	r2, #8
 80007b2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_CAN1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_CAN1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_CAN1_Init+0x64>)
 80007c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007c6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_CAN1_Init+0x64>)
 80007ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007ce:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_CAN1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_CAN1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_CAN1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_CAN1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_CAN1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_CAN1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_CAN1_Init+0x64>)
 80007f6:	f000 fc81 	bl	80010fc <HAL_CAN_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000800:	f000 fa8a 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000002c 	.word	0x2000002c
 800080c:	40006400 	.word	0x40006400

08000810 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_CAN2_Init+0x64>)
 8000816:	4a18      	ldr	r2, [pc, #96]	; (8000878 <MX_CAN2_Init+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_CAN2_Init+0x64>)
 800081c:	2208      	movs	r2, #8
 800081e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_CAN2_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_CAN2_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_CAN2_Init+0x64>)
 800082e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000832:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_CAN2_Init+0x64>)
 8000836:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800083a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_CAN2_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_CAN2_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_CAN2_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_CAN2_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_CAN2_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_CAN2_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_CAN2_Init+0x64>)
 8000862:	f000 fc4b 	bl	80010fc <HAL_CAN_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800086c:	f000 fa54 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000054 	.word	0x20000054
 8000878:	40006800 	.word	0x40006800

0800087c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08e      	sub	sp, #56	; 0x38
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  RTC_TamperTypeDef sTamper = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2220      	movs	r2, #32
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fb38 	bl	8002f12 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008a2:	4b36      	ldr	r3, [pc, #216]	; (800097c <MX_RTC_Init+0x100>)
 80008a4:	4a36      	ldr	r2, [pc, #216]	; (8000980 <MX_RTC_Init+0x104>)
 80008a6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008a8:	4b34      	ldr	r3, [pc, #208]	; (800097c <MX_RTC_Init+0x100>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <MX_RTC_Init+0x100>)
 80008b0:	227f      	movs	r2, #127	; 0x7f
 80008b2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008b4:	4b31      	ldr	r3, [pc, #196]	; (800097c <MX_RTC_Init+0x100>)
 80008b6:	22ff      	movs	r2, #255	; 0xff
 80008b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_RTC_Init+0x100>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008c0:	4b2e      	ldr	r3, [pc, #184]	; (800097c <MX_RTC_Init+0x100>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <MX_RTC_Init+0x100>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008cc:	482b      	ldr	r0, [pc, #172]	; (800097c <MX_RTC_Init+0x100>)
 80008ce:	f001 ffc5 	bl	800285c <HAL_RTC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80008d8:	f000 fa1e 	bl	8000d18 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x3;
 80008dc:	2303      	movs	r3, #3
 80008de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0x26;
 80008e2:	2326      	movs	r3, #38	; 0x26
 80008e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0x0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	633b      	str	r3, [r7, #48]	; 0x30
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	2201      	movs	r2, #1
 80008fc:	4619      	mov	r1, r3
 80008fe:	481f      	ldr	r0, [pc, #124]	; (800097c <MX_RTC_Init+0x100>)
 8000900:	f002 f822 	bl	8002948 <HAL_RTC_SetTime>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800090a:	f000 fa05 	bl	8000d18 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800090e:	2303      	movs	r3, #3
 8000910:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JUNE;
 8000914:	2306      	movs	r3, #6
 8000916:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 0x10;
 800091a:	2310      	movs	r3, #16
 800091c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 0x24;
 8000920:	2324      	movs	r3, #36	; 0x24
 8000922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	2201      	movs	r2, #1
 800092c:	4619      	mov	r1, r3
 800092e:	4813      	ldr	r0, [pc, #76]	; (800097c <MX_RTC_Init+0x100>)
 8000930:	f002 f902 	bl	8002b38 <HAL_RTC_SetDate>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800093a:	f000 f9ed 	bl	8000d18 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 800093e:	2301      	movs	r3, #1
 8000940:	603b      	str	r3, [r7, #0]
  sTamper.PinSelection = RTC_TAMPERPIN_DEFAULT;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	61fb      	str	r3, [r7, #28]
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 800095e:	463b      	mov	r3, r7
 8000960:	4619      	mov	r1, r3
 8000962:	4806      	ldr	r0, [pc, #24]	; (800097c <MX_RTC_Init+0x100>)
 8000964:	f002 fa78 	bl	8002e58 <HAL_RTCEx_SetTamper>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_RTC_Init+0xf6>
  {
    Error_Handler();
 800096e:	f000 f9d3 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	3738      	adds	r7, #56	; 0x38
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000007c 	.word	0x2000007c
 8000980:	40002800 	.word	0x40002800

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <MX_GPIO_Init+0x104>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a39      	ldr	r2, [pc, #228]	; (8000a88 <MX_GPIO_Init+0x104>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <MX_GPIO_Init+0x104>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b33      	ldr	r3, [pc, #204]	; (8000a88 <MX_GPIO_Init+0x104>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a32      	ldr	r2, [pc, #200]	; (8000a88 <MX_GPIO_Init+0x104>)
 80009c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b30      	ldr	r3, [pc, #192]	; (8000a88 <MX_GPIO_Init+0x104>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <MX_GPIO_Init+0x104>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a2b      	ldr	r2, [pc, #172]	; (8000a88 <MX_GPIO_Init+0x104>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <MX_GPIO_Init+0x104>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <MX_GPIO_Init+0x104>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a24      	ldr	r2, [pc, #144]	; (8000a88 <MX_GPIO_Init+0x104>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <MX_GPIO_Init+0x104>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STB1_Pin|STB2_Pin|D0_Pin|D1_Pin
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2139      	movs	r1, #57	; 0x39
 8000a0e:	481f      	ldr	r0, [pc, #124]	; (8000a8c <MX_GPIO_Init+0x108>)
 8000a10:	f001 fa04 	bl	8001e1c <HAL_GPIO_WritePin>
                          , GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|EN_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2103      	movs	r1, #3
 8000a18:	481d      	ldr	r0, [pc, #116]	; (8000a90 <MX_GPIO_Init+0x10c>)
 8000a1a:	f001 f9ff 	bl	8001e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D2_Pin|D3_Pin|D4_Pin|D5_Pin
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000a24:	481b      	ldr	r0, [pc, #108]	; (8000a94 <MX_GPIO_Init+0x110>)
 8000a26:	f001 f9f9 	bl	8001e1c <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STB1_Pin STB2_Pin D0_Pin D1_Pin
                           BUZZ_Pin */
  GPIO_InitStruct.Pin = STB1_Pin|STB2_Pin|D0_Pin|D1_Pin;
 8000a2a:	2339      	movs	r3, #57	; 0x39
 8000a2c:	617b      	str	r3, [r7, #20]

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4812      	ldr	r0, [pc, #72]	; (8000a8c <MX_GPIO_Init+0x108>)
 8000a42:	f001 f84f 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_Pin|EN_Pin;
 8000a46:	2303      	movs	r3, #3
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_GPIO_Init+0x10c>)
 8000a5e:	f001 f841 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D4_Pin|D5_Pin
 8000a62:	f24f 0303 	movw	r3, #61443	; 0xf003
 8000a66:	617b      	str	r3, [r7, #20]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <MX_GPIO_Init+0x110>)
 8000a7c:	f001 f832 	bl	8001ae4 <HAL_GPIO_Init>

}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40020400 	.word	0x40020400

08000a98 <lcd_init>:
{

}

void lcd_init()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 8000a9c:	200a      	movs	r0, #10
 8000a9e:	f000 fb09 	bl	80010b4 <HAL_Delay>
	cmd(0x01);
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f000 f80e 	bl	8000ac4 <cmd>
	cmd(0x38);
 8000aa8:	2038      	movs	r0, #56	; 0x38
 8000aaa:	f000 f80b 	bl	8000ac4 <cmd>
	cmd(0x06);
 8000aae:	2006      	movs	r0, #6
 8000ab0:	f000 f808 	bl	8000ac4 <cmd>
	cmd(0x0C);
 8000ab4:	200c      	movs	r0, #12
 8000ab6:	f000 f805 	bl	8000ac4 <cmd>
	HAL_Delay(10);
 8000aba:	200a      	movs	r0, #10
 8000abc:	f000 fafa 	bl	80010b4 <HAL_Delay>
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <cmd>:

void cmd(unsigned char C)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, RS_Pin, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4831      	ldr	r0, [pc, #196]	; (8000b98 <cmd+0xd4>)
 8000ad4:	f001 f9a2 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D0_Pin,(C&0X01));
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	482d      	ldr	r0, [pc, #180]	; (8000b9c <cmd+0xd8>)
 8000ae6:	f001 f999 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D1_Pin,(C&0X02));
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	2120      	movs	r1, #32
 8000af6:	4829      	ldr	r0, [pc, #164]	; (8000b9c <cmd+0xd8>)
 8000af8:	f001 f990 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D2_Pin,(C&0X04));
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	2101      	movs	r1, #1
 8000b08:	4825      	ldr	r0, [pc, #148]	; (8000ba0 <cmd+0xdc>)
 8000b0a:	f001 f987 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D3_Pin,(C&0X08));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	461a      	mov	r2, r3
 8000b18:	2102      	movs	r1, #2
 8000b1a:	4821      	ldr	r0, [pc, #132]	; (8000ba0 <cmd+0xdc>)
 8000b1c:	f001 f97e 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D4_Pin,(C&0X10));
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 0310 	and.w	r3, r3, #16
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b2e:	481c      	ldr	r0, [pc, #112]	; (8000ba0 <cmd+0xdc>)
 8000b30:	f001 f974 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D5_Pin,(C&0X20));
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 0320 	and.w	r3, r3, #32
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b42:	4817      	ldr	r0, [pc, #92]	; (8000ba0 <cmd+0xdc>)
 8000b44:	f001 f96a 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin,(C&0X40));
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	461a      	mov	r2, r3
 8000b52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b56:	4812      	ldr	r0, [pc, #72]	; (8000ba0 <cmd+0xdc>)
 8000b58:	f001 f960 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D7_Pin,(C&0X80));
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b6a:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <cmd+0xdc>)
 8000b6c:	f001 f956 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 1);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2102      	movs	r1, #2
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <cmd+0xd4>)
 8000b76:	f001 f951 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000b7a:	2005      	movs	r0, #5
 8000b7c:	f000 fa9a 	bl	80010b4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2102      	movs	r1, #2
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <cmd+0xd4>)
 8000b86:	f001 f949 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000b8a:	2005      	movs	r0, #5
 8000b8c:	f000 fa92 	bl	80010b4 <HAL_Delay>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40020800 	.word	0x40020800
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <data>:

void data (unsigned char D)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, RS_Pin, 1);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	4831      	ldr	r0, [pc, #196]	; (8000c78 <data+0xd4>)
 8000bb4:	f001 f932 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D0_Pin,(D&0X01));
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	482d      	ldr	r0, [pc, #180]	; (8000c7c <data+0xd8>)
 8000bc6:	f001 f929 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D1_Pin,(D&0X02));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	4829      	ldr	r0, [pc, #164]	; (8000c7c <data+0xd8>)
 8000bd8:	f001 f920 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D2_Pin,(D&0X04));
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	2101      	movs	r1, #1
 8000be8:	4825      	ldr	r0, [pc, #148]	; (8000c80 <data+0xdc>)
 8000bea:	f001 f917 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D3_Pin,(D&0X08));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	4821      	ldr	r0, [pc, #132]	; (8000c80 <data+0xdc>)
 8000bfc:	f001 f90e 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D4_Pin,(D&0X10));
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	461a      	mov	r2, r3
 8000c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0e:	481c      	ldr	r0, [pc, #112]	; (8000c80 <data+0xdc>)
 8000c10:	f001 f904 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D5_Pin,(D&0X20));
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 0320 	and.w	r3, r3, #32
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c22:	4817      	ldr	r0, [pc, #92]	; (8000c80 <data+0xdc>)
 8000c24:	f001 f8fa 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin,(D&0X40));
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	461a      	mov	r2, r3
 8000c32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c36:	4812      	ldr	r0, [pc, #72]	; (8000c80 <data+0xdc>)
 8000c38:	f001 f8f0 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D7_Pin,(D&0X80));
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	461a      	mov	r2, r3
 8000c46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c4a:	480d      	ldr	r0, [pc, #52]	; (8000c80 <data+0xdc>)
 8000c4c:	f001 f8e6 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 1);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2102      	movs	r1, #2
 8000c54:	4808      	ldr	r0, [pc, #32]	; (8000c78 <data+0xd4>)
 8000c56:	f001 f8e1 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000c5a:	2005      	movs	r0, #5
 8000c5c:	f000 fa2a 	bl	80010b4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2102      	movs	r1, #2
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <data+0xd4>)
 8000c66:	f001 f8d9 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000c6a:	2005      	movs	r0, #5
 8000c6c:	f000 fa22 	bl	80010b4 <HAL_Delay>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020400 	.word	0x40020400

08000c84 <display>:

void display(unsigned char *ptr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	while(*ptr!='\0')
 8000c8c:	e009      	b.n	8000ca2 <display+0x1e>
	{
	data(*ptr++);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff84 	bl	8000ba4 <data>
	HAL_Delay(2);
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f000 fa09 	bl	80010b4 <HAL_Delay>
	while(*ptr!='\0')
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1f1      	bne.n	8000c8e <display+0xa>
	}
}
 8000caa:	bf00      	nop
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <Time>:

void Time(unsigned char Value)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
	data(((Value%100)/10)+0X30);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <Time+0x5c>)
 8000cc2:	fba2 1203 	umull	r1, r2, r2, r3
 8000cc6:	0952      	lsrs	r2, r2, #5
 8000cc8:	2164      	movs	r1, #100	; 0x64
 8000cca:	fb01 f202 	mul.w	r2, r1, r2
 8000cce:	1a9b      	subs	r3, r3, r2
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <Time+0x60>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	08db      	lsrs	r3, r3, #3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	3330      	adds	r3, #48	; 0x30
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5f 	bl	8000ba4 <data>
	data((Value%10)+0X30);
 8000ce6:	79fa      	ldrb	r2, [r7, #7]
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <Time+0x60>)
 8000cea:	fba3 1302 	umull	r1, r3, r3, r2
 8000cee:	08d9      	lsrs	r1, r3, #3
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	3330      	adds	r3, #48	; 0x30
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff4f 	bl	8000ba4 <data>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	51eb851f 	.word	0x51eb851f
 8000d14:	cccccccd 	.word	0xcccccccd

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <Error_Handler+0x8>
	...

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d38:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800

08000d74 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a42      	ldr	r2, [pc, #264]	; (8000e9c <HAL_CAN_MspInit+0x128>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d136      	bne.n	8000e04 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d96:	4b42      	ldr	r3, [pc, #264]	; (8000ea0 <HAL_CAN_MspInit+0x12c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	4a40      	ldr	r2, [pc, #256]	; (8000ea0 <HAL_CAN_MspInit+0x12c>)
 8000d9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000da0:	4b3f      	ldr	r3, [pc, #252]	; (8000ea0 <HAL_CAN_MspInit+0x12c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d10d      	bne.n	8000dc4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <HAL_CAN_MspInit+0x130>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a3c      	ldr	r2, [pc, #240]	; (8000ea4 <HAL_CAN_MspInit+0x130>)
 8000db2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
 8000db8:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <HAL_CAN_MspInit+0x130>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dc0:	61bb      	str	r3, [r7, #24]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <HAL_CAN_MspInit+0x130>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	4a35      	ldr	r2, [pc, #212]	; (8000ea4 <HAL_CAN_MspInit+0x130>)
 8000dce:	f043 0302 	orr.w	r3, r3, #2
 8000dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd4:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <HAL_CAN_MspInit+0x130>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000de0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000df2:	2309      	movs	r3, #9
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	482a      	ldr	r0, [pc, #168]	; (8000ea8 <HAL_CAN_MspInit+0x134>)
 8000dfe:	f000 fe71 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000e02:	e047      	b.n	8000e94 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a28      	ldr	r2, [pc, #160]	; (8000eac <HAL_CAN_MspInit+0x138>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d142      	bne.n	8000e94 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <HAL_CAN_MspInit+0x130>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a23      	ldr	r2, [pc, #140]	; (8000ea4 <HAL_CAN_MspInit+0x130>)
 8000e18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <HAL_CAN_MspInit+0x130>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_CAN_MspInit+0x12c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <HAL_CAN_MspInit+0x12c>)
 8000e32:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e34:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <HAL_CAN_MspInit+0x12c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d10d      	bne.n	8000e58 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_CAN_MspInit+0x130>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <HAL_CAN_MspInit+0x130>)
 8000e46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_CAN_MspInit+0x130>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_CAN_MspInit+0x130>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <HAL_CAN_MspInit+0x130>)
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	6313      	str	r3, [r2, #48]	; 0x30
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_CAN_MspInit+0x130>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e74:	2360      	movs	r3, #96	; 0x60
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000e84:	2309      	movs	r3, #9
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <HAL_CAN_MspInit+0x134>)
 8000e90:	f000 fe28 	bl	8001ae4 <HAL_GPIO_Init>
}
 8000e94:	bf00      	nop
 8000e96:	3730      	adds	r7, #48	; 0x30
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40006400 	.word	0x40006400
 8000ea0:	20000124 	.word	0x20000124
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	40006800 	.word	0x40006800

08000eb0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <HAL_RTC_MspInit+0x4c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d111      	bne.n	8000ef4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 fbda 	bl	8002698 <HAL_RCCEx_PeriphCLKConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000eea:	f7ff ff15 	bl	8000d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <HAL_RTC_MspInit+0x50>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40002800 	.word	0x40002800
 8000f00:	42470e3c 	.word	0x42470e3c

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f08:	e7fe      	b.n	8000f08 <NMI_Handler+0x4>

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f50:	f000 f890 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <SystemInit+0x20>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <SystemInit+0x20>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f82:	490e      	ldr	r1, [pc, #56]	; (8000fbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f98:	4c0b      	ldr	r4, [pc, #44]	; (8000fc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa6:	f7ff ffd7 	bl	8000f58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000faa:	f001 ffbb 	bl	8002f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fae:	f7ff fa89 	bl	80004c4 <main>
  bx  lr    
 8000fb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fc0:	08002fc4 	.word	0x08002fc4
  ldr r2, =_sbss
 8000fc4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fc8:	2000012c 	.word	0x2000012c

08000fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC_IRQHandler>
	...

08000fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <HAL_Init+0x40>)
 8000fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_Init+0x40>)
 8000fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_Init+0x40>)
 8000ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 fd3f 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffe:	200f      	movs	r0, #15
 8001000:	f000 f808 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001004:	f7ff fe8e 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023c00 	.word	0x40023c00

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x54>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x58>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fd49 	bl	8001aca <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 fd1f 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_InitTick+0x5c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000004 	.word	0x20000004
 800106c:	2000000c 	.word	0x2000000c
 8001070:	20000008 	.word	0x20000008

08001074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x20>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x24>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_IncTick+0x24>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	2000000c 	.word	0x2000000c
 8001098:	20000128 	.word	0x20000128

0800109c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_GetTick+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000128 	.word	0x20000128

080010b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff ffee 	bl	800109c <HAL_GetTick>
 80010c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010cc:	d005      	beq.n	80010da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_Delay+0x44>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010da:	bf00      	nop
 80010dc:	f7ff ffde 	bl	800109c <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8f7      	bhi.n	80010dc <HAL_Delay+0x28>
  {
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000000c 	.word	0x2000000c

080010fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e0ed      	b.n	80012ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d102      	bne.n	8001120 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fe2a 	bl	8000d74 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001130:	f7ff ffb4 	bl	800109c <HAL_GetTick>
 8001134:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001136:	e012      	b.n	800115e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001138:	f7ff ffb0 	bl	800109c <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b0a      	cmp	r3, #10
 8001144:	d90b      	bls.n	800115e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2205      	movs	r2, #5
 8001156:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e0c5      	b.n	80012ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0e5      	beq.n	8001138 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0202 	bic.w	r2, r2, #2
 800117a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800117c:	f7ff ff8e 	bl	800109c <HAL_GetTick>
 8001180:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001182:	e012      	b.n	80011aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001184:	f7ff ff8a 	bl	800109c <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b0a      	cmp	r3, #10
 8001190:	d90b      	bls.n	80011aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2205      	movs	r2, #5
 80011a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e09f      	b.n	80012ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1e5      	bne.n	8001184 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7e1b      	ldrb	r3, [r3, #24]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d108      	bne.n	80011d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e007      	b.n	80011e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7e5b      	ldrb	r3, [r3, #25]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d108      	bne.n	80011fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e007      	b.n	800120c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800120a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7e9b      	ldrb	r3, [r3, #26]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d108      	bne.n	8001226 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0220 	orr.w	r2, r2, #32
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	e007      	b.n	8001236 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0220 	bic.w	r2, r2, #32
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7edb      	ldrb	r3, [r3, #27]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d108      	bne.n	8001250 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0210 	bic.w	r2, r2, #16
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	e007      	b.n	8001260 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0210 	orr.w	r2, r2, #16
 800125e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7f1b      	ldrb	r3, [r3, #28]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d108      	bne.n	800127a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0208 	orr.w	r2, r2, #8
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	e007      	b.n	800128a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0208 	bic.w	r2, r2, #8
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7f5b      	ldrb	r3, [r3, #29]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d108      	bne.n	80012a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f042 0204 	orr.w	r2, r2, #4
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e007      	b.n	80012b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0204 	bic.w	r2, r2, #4
 80012b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	ea42 0103 	orr.w	r1, r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	1e5a      	subs	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800130c:	7cfb      	ldrb	r3, [r7, #19]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d003      	beq.n	800131a <HAL_CAN_ConfigFilter+0x26>
 8001312:	7cfb      	ldrb	r3, [r7, #19]
 8001314:	2b02      	cmp	r3, #2
 8001316:	f040 80be 	bne.w	8001496 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800131a:	4b65      	ldr	r3, [pc, #404]	; (80014b0 <HAL_CAN_ConfigFilter+0x1bc>)
 800131c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001324:	f043 0201 	orr.w	r2, r3, #1
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001334:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	431a      	orrs	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	2201      	movs	r2, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	401a      	ands	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d123      	bne.n	80013c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800139e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3248      	adds	r2, #72	; 0x48
 80013a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013ba:	6979      	ldr	r1, [r7, #20]
 80013bc:	3348      	adds	r3, #72	; 0x48
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	440b      	add	r3, r1
 80013c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d122      	bne.n	8001412 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	431a      	orrs	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3248      	adds	r2, #72	; 0x48
 80013f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001406:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001408:	6979      	ldr	r1, [r7, #20]
 800140a:	3348      	adds	r3, #72	; 0x48
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d109      	bne.n	800142e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43db      	mvns	r3, r3
 8001424:	401a      	ands	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800142c:	e007      	b.n	800143e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	431a      	orrs	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43db      	mvns	r3, r3
 8001450:	401a      	ands	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001458:	e007      	b.n	800146a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	431a      	orrs	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	431a      	orrs	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001488:	f023 0201 	bic.w	r2, r3, #1
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e006      	b.n	80014a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
  }
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40006400 	.word	0x40006400

080014b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d12e      	bne.n	8001526 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2202      	movs	r2, #2
 80014cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0201 	bic.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014e0:	f7ff fddc 	bl	800109c <HAL_GetTick>
 80014e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014e6:	e012      	b.n	800150e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014e8:	f7ff fdd8 	bl	800109c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b0a      	cmp	r3, #10
 80014f4:	d90b      	bls.n	800150e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2205      	movs	r2, #5
 8001506:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e012      	b.n	8001534 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1e5      	bne.n	80014e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e006      	b.n	8001534 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
  }
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001550:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800155a:	7ffb      	ldrb	r3, [r7, #31]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d003      	beq.n	8001568 <HAL_CAN_AddTxMessage+0x2c>
 8001560:	7ffb      	ldrb	r3, [r7, #31]
 8001562:	2b02      	cmp	r3, #2
 8001564:	f040 80b8 	bne.w	80016d8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10a      	bne.n	8001588 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001578:	2b00      	cmp	r3, #0
 800157a:	d105      	bne.n	8001588 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 80a0 	beq.w	80016c8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	0e1b      	lsrs	r3, r3, #24
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d907      	bls.n	80015a8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e09e      	b.n	80016e6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015a8:	2201      	movs	r2, #1
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	409a      	lsls	r2, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10d      	bne.n	80015d6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015c4:	68f9      	ldr	r1, [r7, #12]
 80015c6:	6809      	ldr	r1, [r1, #0]
 80015c8:	431a      	orrs	r2, r3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3318      	adds	r3, #24
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	440b      	add	r3, r1
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e00f      	b.n	80015f6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015e6:	68f9      	ldr	r1, [r7, #12]
 80015e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80015ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3318      	adds	r3, #24
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	440b      	add	r3, r1
 80015f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6819      	ldr	r1, [r3, #0]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3318      	adds	r3, #24
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	440b      	add	r3, r1
 8001606:	3304      	adds	r3, #4
 8001608:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	7d1b      	ldrb	r3, [r3, #20]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d111      	bne.n	8001636 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3318      	adds	r3, #24
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	4413      	add	r3, r2
 800161e:	3304      	adds	r3, #4
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	6811      	ldr	r1, [r2, #0]
 8001626:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3318      	adds	r3, #24
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	440b      	add	r3, r1
 8001632:	3304      	adds	r3, #4
 8001634:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3307      	adds	r3, #7
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	061a      	lsls	r2, r3, #24
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3306      	adds	r3, #6
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3305      	adds	r3, #5
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	4313      	orrs	r3, r2
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	3204      	adds	r2, #4
 8001656:	7812      	ldrb	r2, [r2, #0]
 8001658:	4610      	mov	r0, r2
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	6811      	ldr	r1, [r2, #0]
 800165e:	ea43 0200 	orr.w	r2, r3, r0
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	440b      	add	r3, r1
 8001668:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800166c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3303      	adds	r3, #3
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	061a      	lsls	r2, r3, #24
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3302      	adds	r3, #2
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3301      	adds	r3, #1
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	4313      	orrs	r3, r2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	4610      	mov	r0, r2
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	6811      	ldr	r1, [r2, #0]
 8001694:	ea43 0200 	orr.w	r2, r3, r0
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	440b      	add	r3, r1
 800169e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80016a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3318      	adds	r3, #24
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	4413      	add	r3, r2
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	6811      	ldr	r1, [r2, #0]
 80016b6:	f043 0201 	orr.w	r2, r3, #1
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3318      	adds	r3, #24
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	440b      	add	r3, r1
 80016c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e00e      	b.n	80016e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e006      	b.n	80016e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
  }
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016f2:	b480      	push	{r7}
 80016f4:	b087      	sub	sp, #28
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001706:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d003      	beq.n	8001716 <HAL_CAN_GetRxMessage+0x24>
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	2b02      	cmp	r3, #2
 8001712:	f040 80f3 	bne.w	80018fc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10e      	bne.n	800173a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d116      	bne.n	8001758 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e0e7      	b.n	800190a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d107      	bne.n	8001758 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0d8      	b.n	800190a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	331b      	adds	r3, #27
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	4413      	add	r3, r2
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0204 	and.w	r2, r3, #4
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10c      	bne.n	8001790 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	331b      	adds	r3, #27
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	0d5b      	lsrs	r3, r3, #21
 8001786:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e00b      	b.n	80017a8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	331b      	adds	r3, #27
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	4413      	add	r3, r2
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	331b      	adds	r3, #27
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	4413      	add	r3, r2
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0202 	and.w	r2, r3, #2
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	331b      	adds	r3, #27
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4413      	add	r3, r2
 80017ca:	3304      	adds	r3, #4
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 020f 	and.w	r2, r3, #15
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	331b      	adds	r3, #27
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	4413      	add	r3, r2
 80017e2:	3304      	adds	r3, #4
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	331b      	adds	r3, #27
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	4413      	add	r3, r2
 80017fa:	3304      	adds	r3, #4
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	0c1b      	lsrs	r3, r3, #16
 8001800:	b29a      	uxth	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	4413      	add	r3, r2
 8001810:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	4413      	add	r3, r2
 8001826:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	0a1a      	lsrs	r2, r3, #8
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4413      	add	r3, r2
 8001840:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	0c1a      	lsrs	r2, r3, #16
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	3302      	adds	r3, #2
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0e1a      	lsrs	r2, r3, #24
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	3303      	adds	r3, #3
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	4413      	add	r3, r2
 8001874:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	3304      	adds	r3, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	0a1a      	lsrs	r2, r3, #8
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	3305      	adds	r3, #5
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0c1a      	lsrs	r2, r3, #16
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	3306      	adds	r3, #6
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
 80018c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0e1a      	lsrs	r2, r3, #24
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	3307      	adds	r3, #7
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d108      	bne.n	80018e8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0220 	orr.w	r2, r2, #32
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	e007      	b.n	80018f8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691a      	ldr	r2, [r3, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0220 	orr.w	r2, r2, #32
 80018f6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	e006      	b.n	800190a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
  }
}
 800190a:	4618      	mov	r0, r3
 800190c:	371c      	adds	r7, #28
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001934:	4013      	ands	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194a:	4a04      	ldr	r2, [pc, #16]	; (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	60d3      	str	r3, [r2, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <__NVIC_GetPriorityGrouping+0x18>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	f003 0307 	and.w	r3, r3, #7
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f7ff ff8e 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff47 	bl	8001918 <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff5c 	bl	8001960 <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff8e 	bl	80019d0 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5d 	bl	800197c <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffb0 	bl	8001a38 <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	e16b      	b.n	8001dd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	f040 815a 	bne.w	8001dd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d005      	beq.n	8001b36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d130      	bne.n	8001b98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 0201 	and.w	r2, r3, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d017      	beq.n	8001bd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d123      	bne.n	8001c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3208      	adds	r2, #8
 8001be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	69b9      	ldr	r1, [r7, #24]
 8001c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0203 	and.w	r2, r3, #3
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80b4 	beq.w	8001dd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b60      	ldr	r3, [pc, #384]	; (8001df0 <HAL_GPIO_Init+0x30c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a5f      	ldr	r2, [pc, #380]	; (8001df0 <HAL_GPIO_Init+0x30c>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b5d      	ldr	r3, [pc, #372]	; (8001df0 <HAL_GPIO_Init+0x30c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c86:	4a5b      	ldr	r2, [pc, #364]	; (8001df4 <HAL_GPIO_Init+0x310>)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_GPIO_Init+0x314>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d02b      	beq.n	8001d0a <HAL_GPIO_Init+0x226>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a51      	ldr	r2, [pc, #324]	; (8001dfc <HAL_GPIO_Init+0x318>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d025      	beq.n	8001d06 <HAL_GPIO_Init+0x222>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a50      	ldr	r2, [pc, #320]	; (8001e00 <HAL_GPIO_Init+0x31c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d01f      	beq.n	8001d02 <HAL_GPIO_Init+0x21e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4f      	ldr	r2, [pc, #316]	; (8001e04 <HAL_GPIO_Init+0x320>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d019      	beq.n	8001cfe <HAL_GPIO_Init+0x21a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4e      	ldr	r2, [pc, #312]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_GPIO_Init+0x216>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4d      	ldr	r2, [pc, #308]	; (8001e0c <HAL_GPIO_Init+0x328>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_GPIO_Init+0x212>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4c      	ldr	r2, [pc, #304]	; (8001e10 <HAL_GPIO_Init+0x32c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d007      	beq.n	8001cf2 <HAL_GPIO_Init+0x20e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4b      	ldr	r2, [pc, #300]	; (8001e14 <HAL_GPIO_Init+0x330>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_GPIO_Init+0x20a>
 8001cea:	2307      	movs	r3, #7
 8001cec:	e00e      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cee:	2308      	movs	r3, #8
 8001cf0:	e00c      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cf2:	2306      	movs	r3, #6
 8001cf4:	e00a      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	e008      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	f002 0203 	and.w	r2, r2, #3
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	4093      	lsls	r3, r2
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d1c:	4935      	ldr	r1, [pc, #212]	; (8001df4 <HAL_GPIO_Init+0x310>)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2a:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d4e:	4a32      	ldr	r2, [pc, #200]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d54:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d78:	4a27      	ldr	r2, [pc, #156]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d7e:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001da2:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dcc:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	f67f ae90 	bls.w	8001b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40013800 	.word	0x40013800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40020c00 	.word	0x40020c00
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40021400 	.word	0x40021400
 8001e10:	40021800 	.word	0x40021800
 8001e14:	40021c00 	.word	0x40021c00
 8001e18:	40013c00 	.word	0x40013c00

08001e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e38:	e003      	b.n	8001e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e3a:	887b      	ldrh	r3, [r7, #2]
 8001e3c:	041a      	lsls	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	619a      	str	r2, [r3, #24]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e267      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d075      	beq.n	8001f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e6e:	4b88      	ldr	r3, [pc, #544]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d00c      	beq.n	8001e94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7a:	4b85      	ldr	r3, [pc, #532]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d112      	bne.n	8001eac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e86:	4b82      	ldr	r3, [pc, #520]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e92:	d10b      	bne.n	8001eac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	4b7e      	ldr	r3, [pc, #504]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d05b      	beq.n	8001f58 <HAL_RCC_OscConfig+0x108>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d157      	bne.n	8001f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e242      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	d106      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x74>
 8001eb6:	4b76      	ldr	r3, [pc, #472]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a75      	ldr	r2, [pc, #468]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e01d      	b.n	8001f00 <HAL_RCC_OscConfig+0xb0>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x98>
 8001ece:	4b70      	ldr	r3, [pc, #448]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6f      	ldr	r2, [pc, #444]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b6d      	ldr	r3, [pc, #436]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6c      	ldr	r2, [pc, #432]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCC_OscConfig+0xb0>
 8001ee8:	4b69      	ldr	r3, [pc, #420]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a68      	ldr	r2, [pc, #416]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b66      	ldr	r3, [pc, #408]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a65      	ldr	r2, [pc, #404]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff f8c8 	bl	800109c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff f8c4 	bl	800109c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e207      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b5b      	ldr	r3, [pc, #364]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0xc0>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff f8b4 	bl	800109c <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff f8b0 	bl	800109c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1f3      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	4b51      	ldr	r3, [pc, #324]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0xe8>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d063      	beq.n	800202e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f66:	4b4a      	ldr	r3, [pc, #296]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f72:	4b47      	ldr	r3, [pc, #284]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d11c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7e:	4b44      	ldr	r3, [pc, #272]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d116      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	4b41      	ldr	r3, [pc, #260]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x152>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e1c7      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4937      	ldr	r1, [pc, #220]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	e03a      	b.n	800202e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc0:	4b34      	ldr	r3, [pc, #208]	; (8002094 <HAL_RCC_OscConfig+0x244>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f869 	bl	800109c <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fce:	f7ff f865 	bl	800109c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e1a8      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4925      	ldr	r1, [pc, #148]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
 8002000:	e015      	b.n	800202e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_RCC_OscConfig+0x244>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff f848 	bl	800109c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002010:	f7ff f844 	bl	800109c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e187      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d036      	beq.n	80020a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d016      	beq.n	8002070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_RCC_OscConfig+0x248>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7ff f828 	bl	800109c <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff f824 	bl	800109c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e167      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8002064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x200>
 800206e:	e01b      	b.n	80020a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_RCC_OscConfig+0x248>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7ff f811 	bl	800109c <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207c:	e00e      	b.n	800209c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207e:	f7ff f80d 	bl	800109c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d907      	bls.n	800209c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e150      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
 8002090:	40023800 	.word	0x40023800
 8002094:	42470000 	.word	0x42470000
 8002098:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209c:	4b88      	ldr	r3, [pc, #544]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800209e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1ea      	bne.n	800207e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8097 	beq.w	80021e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ba:	4b81      	ldr	r3, [pc, #516]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10f      	bne.n	80020e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	4b7d      	ldr	r3, [pc, #500]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a7c      	ldr	r2, [pc, #496]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b7a      	ldr	r3, [pc, #488]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e2:	2301      	movs	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e6:	4b77      	ldr	r3, [pc, #476]	; (80022c4 <HAL_RCC_OscConfig+0x474>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d118      	bne.n	8002124 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f2:	4b74      	ldr	r3, [pc, #464]	; (80022c4 <HAL_RCC_OscConfig+0x474>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a73      	ldr	r2, [pc, #460]	; (80022c4 <HAL_RCC_OscConfig+0x474>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fe:	f7fe ffcd 	bl	800109c <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002106:	f7fe ffc9 	bl	800109c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e10c      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <HAL_RCC_OscConfig+0x474>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x2ea>
 800212c:	4b64      	ldr	r3, [pc, #400]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	4a63      	ldr	r2, [pc, #396]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6713      	str	r3, [r2, #112]	; 0x70
 8002138:	e01c      	b.n	8002174 <HAL_RCC_OscConfig+0x324>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b05      	cmp	r3, #5
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x30c>
 8002142:	4b5f      	ldr	r3, [pc, #380]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	4a5e      	ldr	r2, [pc, #376]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	6713      	str	r3, [r2, #112]	; 0x70
 800214e:	4b5c      	ldr	r3, [pc, #368]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	4a5b      	ldr	r2, [pc, #364]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6713      	str	r3, [r2, #112]	; 0x70
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0x324>
 800215c:	4b58      	ldr	r3, [pc, #352]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	4a57      	ldr	r2, [pc, #348]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	6713      	str	r3, [r2, #112]	; 0x70
 8002168:	4b55      	ldr	r3, [pc, #340]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	4a54      	ldr	r2, [pc, #336]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800216e:	f023 0304 	bic.w	r3, r3, #4
 8002172:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d015      	beq.n	80021a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217c:	f7fe ff8e 	bl	800109c <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002182:	e00a      	b.n	800219a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7fe ff8a 	bl	800109c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e0cb      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219a:	4b49      	ldr	r3, [pc, #292]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0ee      	beq.n	8002184 <HAL_RCC_OscConfig+0x334>
 80021a6:	e014      	b.n	80021d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a8:	f7fe ff78 	bl	800109c <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b0:	f7fe ff74 	bl	800109c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e0b5      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c6:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1ee      	bne.n	80021b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d105      	bne.n	80021e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d8:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	4a38      	ldr	r2, [pc, #224]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80a1 	beq.w	8002330 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ee:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d05c      	beq.n	80022b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d141      	bne.n	8002286 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <HAL_RCC_OscConfig+0x478>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe ff48 	bl	800109c <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002210:	f7fe ff44 	bl	800109c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e087      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69da      	ldr	r2, [r3, #28]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	019b      	lsls	r3, r3, #6
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	085b      	lsrs	r3, r3, #1
 8002246:	3b01      	subs	r3, #1
 8002248:	041b      	lsls	r3, r3, #16
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	061b      	lsls	r3, r3, #24
 8002252:	491b      	ldr	r1, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_RCC_OscConfig+0x478>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7fe ff1d 	bl	800109c <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002266:	f7fe ff19 	bl	800109c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e05c      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x416>
 8002284:	e054      	b.n	8002330 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_RCC_OscConfig+0x478>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe ff06 	bl	800109c <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe ff02 	bl	800109c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e045      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x444>
 80022b2:	e03d      	b.n	8002330 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e038      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40007000 	.word	0x40007000
 80022c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_RCC_OscConfig+0x4ec>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d028      	beq.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d121      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d11a      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002304:	4293      	cmp	r3, r2
 8002306:	d111      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	085b      	lsrs	r3, r3, #1
 8002314:	3b01      	subs	r3, #1
 8002316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d107      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800

08002340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0cc      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002354:	4b68      	ldr	r3, [pc, #416]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d90c      	bls.n	800237c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b65      	ldr	r3, [pc, #404]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0b8      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d020      	beq.n	80023ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002394:	4b59      	ldr	r3, [pc, #356]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a58      	ldr	r2, [pc, #352]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800239e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a52      	ldr	r2, [pc, #328]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b8:	4b50      	ldr	r3, [pc, #320]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	494d      	ldr	r1, [pc, #308]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d044      	beq.n	8002460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d119      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e07f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fe:	4b3f      	ldr	r3, [pc, #252]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e06f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240e:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e067      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241e:	4b37      	ldr	r3, [pc, #220]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f023 0203 	bic.w	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4934      	ldr	r1, [pc, #208]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	4313      	orrs	r3, r2
 800242e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002430:	f7fe fe34 	bl	800109c <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	e00a      	b.n	800244e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002438:	f7fe fe30 	bl	800109c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	; 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e04f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 020c 	and.w	r2, r3, #12
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	429a      	cmp	r2, r3
 800245e:	d1eb      	bne.n	8002438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002460:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d20c      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e032      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4916      	ldr	r1, [pc, #88]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	490e      	ldr	r1, [pc, #56]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024c6:	f000 f821 	bl	800250c <HAL_RCC_GetSysClockFreq>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	490a      	ldr	r1, [pc, #40]	; (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	5ccb      	ldrb	r3, [r1, r3]
 80024da:	fa22 f303 	lsr.w	r3, r2, r3
 80024de:	4a09      	ldr	r2, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fd94 	bl	8001014 <HAL_InitTick>

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023c00 	.word	0x40023c00
 80024fc:	40023800 	.word	0x40023800
 8002500:	08002fa4 	.word	0x08002fa4
 8002504:	20000004 	.word	0x20000004
 8002508:	20000008 	.word	0x20000008

0800250c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800250c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002510:	b090      	sub	sp, #64	; 0x40
 8002512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	637b      	str	r3, [r7, #52]	; 0x34
 8002518:	2300      	movs	r3, #0
 800251a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800251c:	2300      	movs	r3, #0
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002524:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b08      	cmp	r3, #8
 800252e:	d00d      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x40>
 8002530:	2b08      	cmp	r3, #8
 8002532:	f200 80a1 	bhi.w	8002678 <HAL_RCC_GetSysClockFreq+0x16c>
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x34>
 800253a:	2b04      	cmp	r3, #4
 800253c:	d003      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0x3a>
 800253e:	e09b      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002540:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_GetSysClockFreq+0x184>)
 8002542:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002544:	e09b      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002546:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_RCC_GetSysClockFreq+0x188>)
 8002548:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800254a:	e098      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800254c:	4b4f      	ldr	r3, [pc, #316]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002556:	4b4d      	ldr	r3, [pc, #308]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d028      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002562:	4b4a      	ldr	r3, [pc, #296]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	099b      	lsrs	r3, r3, #6
 8002568:	2200      	movs	r2, #0
 800256a:	623b      	str	r3, [r7, #32]
 800256c:	627a      	str	r2, [r7, #36]	; 0x24
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002574:	2100      	movs	r1, #0
 8002576:	4b47      	ldr	r3, [pc, #284]	; (8002694 <HAL_RCC_GetSysClockFreq+0x188>)
 8002578:	fb03 f201 	mul.w	r2, r3, r1
 800257c:	2300      	movs	r3, #0
 800257e:	fb00 f303 	mul.w	r3, r0, r3
 8002582:	4413      	add	r3, r2
 8002584:	4a43      	ldr	r2, [pc, #268]	; (8002694 <HAL_RCC_GetSysClockFreq+0x188>)
 8002586:	fba0 1202 	umull	r1, r2, r0, r2
 800258a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800258c:	460a      	mov	r2, r1
 800258e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002592:	4413      	add	r3, r2
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002598:	2200      	movs	r2, #0
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	61fa      	str	r2, [r7, #28]
 800259e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025a6:	f7fd fe0f 	bl	80001c8 <__aeabi_uldivmod>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4613      	mov	r3, r2
 80025b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b2:	e053      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b4:	4b35      	ldr	r3, [pc, #212]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	2200      	movs	r2, #0
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	617a      	str	r2, [r7, #20]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025c6:	f04f 0b00 	mov.w	fp, #0
 80025ca:	4652      	mov	r2, sl
 80025cc:	465b      	mov	r3, fp
 80025ce:	f04f 0000 	mov.w	r0, #0
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	0159      	lsls	r1, r3, #5
 80025d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025dc:	0150      	lsls	r0, r2, #5
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	ebb2 080a 	subs.w	r8, r2, sl
 80025e6:	eb63 090b 	sbc.w	r9, r3, fp
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025fe:	ebb2 0408 	subs.w	r4, r2, r8
 8002602:	eb63 0509 	sbc.w	r5, r3, r9
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	00eb      	lsls	r3, r5, #3
 8002610:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002614:	00e2      	lsls	r2, r4, #3
 8002616:	4614      	mov	r4, r2
 8002618:	461d      	mov	r5, r3
 800261a:	eb14 030a 	adds.w	r3, r4, sl
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	eb45 030b 	adc.w	r3, r5, fp
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002632:	4629      	mov	r1, r5
 8002634:	028b      	lsls	r3, r1, #10
 8002636:	4621      	mov	r1, r4
 8002638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800263c:	4621      	mov	r1, r4
 800263e:	028a      	lsls	r2, r1, #10
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002646:	2200      	movs	r2, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	60fa      	str	r2, [r7, #12]
 800264c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002650:	f7fd fdba 	bl	80001c8 <__aeabi_uldivmod>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4613      	mov	r3, r2
 800265a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	3301      	adds	r3, #1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800266c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002676:	e002      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_RCC_GetSysClockFreq+0x184>)
 800267a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800267c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002680:	4618      	mov	r0, r3
 8002682:	3740      	adds	r7, #64	; 0x40
 8002684:	46bd      	mov	sp, r7
 8002686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800
 8002690:	00f42400 	.word	0x00f42400
 8002694:	017d7840 	.word	0x017d7840

08002698 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d035      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026c0:	4b62      	ldr	r3, [pc, #392]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026c6:	f7fe fce9 	bl	800109c <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80026ce:	f7fe fce5 	bl	800109c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0b0      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026e0:	4b5b      	ldr	r3, [pc, #364]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	019a      	lsls	r2, r3, #6
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	071b      	lsls	r3, r3, #28
 80026f8:	4955      	ldr	r1, [pc, #340]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002700:	4b52      	ldr	r3, [pc, #328]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002706:	f7fe fcc9 	bl	800109c <HAL_GetTick>
 800270a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800270e:	f7fe fcc5 	bl	800109c <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e090      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002720:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8083 	beq.w	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b44      	ldr	r3, [pc, #272]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	4a43      	ldr	r2, [pc, #268]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002748:	6413      	str	r3, [r2, #64]	; 0x40
 800274a:	4b41      	ldr	r3, [pc, #260]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002756:	4b3f      	ldr	r3, [pc, #252]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a3e      	ldr	r2, [pc, #248]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002762:	f7fe fc9b 	bl	800109c <HAL_GetTick>
 8002766:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800276a:	f7fe fc97 	bl	800109c <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e062      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800277c:	4b35      	ldr	r3, [pc, #212]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002788:	4b31      	ldr	r3, [pc, #196]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002790:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d02f      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d028      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027a6:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027b0:	4b29      	ldr	r3, [pc, #164]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027b6:	4b28      	ldr	r3, [pc, #160]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80027bc:	4a24      	ldr	r2, [pc, #144]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027c2:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d114      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80027ce:	f7fe fc65 	bl	800109c <HAL_GetTick>
 80027d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	e00a      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7fe fc61 	bl	800109c <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d901      	bls.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e02a      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ec:	4b18      	ldr	r3, [pc, #96]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ee      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002804:	d10d      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281a:	490d      	ldr	r1, [pc, #52]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800281c:	4313      	orrs	r3, r2
 800281e:	608b      	str	r3, [r1, #8]
 8002820:	e005      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002828:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800282c:	6093      	str	r3, [r2, #8]
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002830:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283a:	4905      	ldr	r1, [pc, #20]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800283c:	4313      	orrs	r3, r2
 800283e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	42470068 	.word	0x42470068
 8002850:	40023800 	.word	0x40023800
 8002854:	40007000 	.word	0x40007000
 8002858:	42470e40 	.word	0x42470e40

0800285c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e066      	b.n	8002940 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	7f5b      	ldrb	r3, [r3, #29]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe fb14 	bl	8000eb0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	22ca      	movs	r2, #202	; 0xca
 8002894:	625a      	str	r2, [r3, #36]	; 0x24
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2253      	movs	r2, #83	; 0x53
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fa45 	bl	8002d2e <RTC_EnterInitMode>
 80028a4:	4603      	mov	r3, r0
 80028a6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d12c      	bne.n	8002908 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80028bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028c0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6899      	ldr	r1, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	68d2      	ldr	r2, [r2, #12]
 80028e8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6919      	ldr	r1, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	041a      	lsls	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fa4c 	bl	8002d9c <RTC_ExitInitMode>
 8002904:	4603      	mov	r3, r0
 8002906:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d113      	bne.n	8002936 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699a      	ldr	r2, [r3, #24]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	22ff      	movs	r2, #255	; 0xff
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	7f1b      	ldrb	r3, [r3, #28]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_RTC_SetTime+0x1c>
 8002960:	2302      	movs	r3, #2
 8002962:	e087      	b.n	8002a74 <HAL_RTC_SetTime+0x12c>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2202      	movs	r2, #2
 800296e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d126      	bne.n	80029c4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002980:	2b00      	cmp	r3, #0
 8002982:	d102      	bne.n	800298a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2200      	movs	r2, #0
 8002988:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fa29 	bl	8002de6 <RTC_ByteToBcd2>
 8002994:	4603      	mov	r3, r0
 8002996:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	785b      	ldrb	r3, [r3, #1]
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fa22 	bl	8002de6 <RTC_ByteToBcd2>
 80029a2:	4603      	mov	r3, r0
 80029a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80029a6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	789b      	ldrb	r3, [r3, #2]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fa1a 	bl	8002de6 <RTC_ByteToBcd2>
 80029b2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029b4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	78db      	ldrb	r3, [r3, #3]
 80029bc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80029be:	4313      	orrs	r3, r2
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	e018      	b.n	80029f6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2200      	movs	r2, #0
 80029d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	785b      	ldrb	r3, [r3, #1]
 80029e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80029e4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80029ea:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	78db      	ldrb	r3, [r3, #3]
 80029f0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	22ca      	movs	r2, #202	; 0xca
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2253      	movs	r2, #83	; 0x53
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f991 	bl	8002d2e <RTC_EnterInitMode>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002a10:	7cfb      	ldrb	r3, [r7, #19]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d120      	bne.n	8002a58 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002a20:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002a24:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a34:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6899      	ldr	r1, [r3, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f9a4 	bl	8002d9c <RTC_ExitInitMode>
 8002a54:	4603      	mov	r3, r0
 8002a56:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	22ff      	movs	r2, #255	; 0xff
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	771a      	strb	r2, [r3, #28]

  return status;
 8002a72:	7cfb      	ldrb	r3, [r7, #19]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd90      	pop	{r4, r7, pc}

08002a7c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002aae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	0c1b      	lsrs	r3, r3, #16
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	0d9b      	lsrs	r3, r3, #22
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d11a      	bne.n	8002b2e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 f98f 	bl	8002e20 <RTC_Bcd2ToByte>
 8002b02:	4603      	mov	r3, r0
 8002b04:	461a      	mov	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	785b      	ldrb	r3, [r3, #1]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f986 	bl	8002e20 <RTC_Bcd2ToByte>
 8002b14:	4603      	mov	r3, r0
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	789b      	ldrb	r3, [r3, #2]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f97d 	bl	8002e20 <RTC_Bcd2ToByte>
 8002b26:	4603      	mov	r3, r0
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	7f1b      	ldrb	r3, [r3, #28]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_RTC_SetDate+0x1c>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e071      	b.n	8002c38 <HAL_RTC_SetDate+0x100>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10e      	bne.n	8002b84 <HAL_RTC_SetDate+0x4c>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	785b      	ldrb	r3, [r3, #1]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	785b      	ldrb	r3, [r3, #1]
 8002b76:	f023 0310 	bic.w	r3, r3, #16
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	330a      	adds	r3, #10
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11c      	bne.n	8002bc4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	78db      	ldrb	r3, [r3, #3]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 f929 	bl	8002de6 <RTC_ByteToBcd2>
 8002b94:	4603      	mov	r3, r0
 8002b96:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	785b      	ldrb	r3, [r3, #1]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 f922 	bl	8002de6 <RTC_ByteToBcd2>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ba6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	789b      	ldrb	r3, [r3, #2]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 f91a 	bl	8002de6 <RTC_ByteToBcd2>
 8002bb2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002bb4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	e00e      	b.n	8002be2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	78db      	ldrb	r3, [r3, #3]
 8002bc8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	785b      	ldrb	r3, [r3, #1]
 8002bce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002bd0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002bd6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	22ca      	movs	r2, #202	; 0xca
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2253      	movs	r2, #83	; 0x53
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f89b 	bl	8002d2e <RTC_EnterInitMode>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10c      	bne.n	8002c1c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c0c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002c10:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f8c2 	bl	8002d9c <RTC_ExitInitMode>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d102      	bne.n	8002c28 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	22ff      	movs	r2, #255	; 0xff
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	771a      	strb	r2, [r3, #28]

  return status;
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	371c      	adds	r7, #28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd90      	pop	{r4, r7, pc}

08002c40 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	0b5b      	lsrs	r3, r3, #13
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11a      	bne.n	8002cd4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	78db      	ldrb	r3, [r3, #3]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f8bc 	bl	8002e20 <RTC_Bcd2ToByte>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	785b      	ldrb	r3, [r3, #1]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 f8b3 	bl	8002e20 <RTC_Bcd2ToByte>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	789b      	ldrb	r3, [r3, #2]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f8aa 	bl	8002e20 <RTC_Bcd2ToByte>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cf8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cfa:	f7fe f9cf 	bl	800109c <HAL_GetTick>
 8002cfe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d00:	e009      	b.n	8002d16 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d02:	f7fe f9cb 	bl	800109c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d10:	d901      	bls.n	8002d16 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e007      	b.n	8002d26 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ee      	beq.n	8002d02 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d122      	bne.n	8002d92 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d5a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d5c:	f7fe f99e 	bl	800109c <HAL_GetTick>
 8002d60:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d62:	e00c      	b.n	8002d7e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d64:	f7fe f99a 	bl	800109c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d72:	d904      	bls.n	8002d7e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2204      	movs	r2, #4
 8002d78:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <RTC_EnterInitMode+0x64>
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d1e8      	bne.n	8002d64 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002db6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10a      	bne.n	8002ddc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff ff89 	bl	8002cde <HAL_RTC_WaitForSynchro>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d004      	beq.n	8002ddc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002df4:	e005      	b.n	8002e02 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	3b0a      	subs	r3, #10
 8002e00:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	2b09      	cmp	r3, #9
 8002e06:	d8f6      	bhi.n	8002df6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	b2db      	uxtb	r3, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	0092      	lsls	r2, r2, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	4413      	add	r3, r2
 8002e4a:	b2db      	uxtb	r3, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_RTCEx_SetTamper>:
  *                the configuration information for RTC.
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	7f1b      	ldrb	r3, [r3, #28]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_RTCEx_SetTamper+0x1a>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e049      	b.n	8002f06 <HAL_RTCEx_SetTamper+0xae>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	775a      	strb	r2, [r3, #29]

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAFCR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Configure the tamper trigger bit (this bit is just on the right of the
       tamper enable bit, hence the one-time right shift before updating it) */
  if (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d106      	bne.n	8002ea6 <HAL_RTCEx_SetTamper+0x4e>
  {
    /* Set the tamper trigger bit (case of falling edge or high level) */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e006      	b.n	8002eb4 <HAL_RTCEx_SetTamper+0x5c>
  }
  else
  {
    /* Clear the tamper trigger bit (case of rising edge or low level) */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	43db      	mvns	r3, r3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK              | \
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8002eba:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8002ebe:	60fb      	str	r3, [r7, #12]
              RTC_TAMPER_PULLUP_MASK             | \
              RTC_TAFCR_TAMP1INSEL               | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
             (uint32_t)sTamper->SamplingFrequency | \
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691b      	ldr	r3, [r3, #16]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8002ec8:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8002ece:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
             (uint32_t)sTamper->PrechargeDuration | \
 8002ed4:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PinSelection      | \
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
             (uint32_t)sTamper->TamperPullUp      | \
 8002eda:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->PinSelection      | \
 8002ee0:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Disable tamper global interrupt in case it is enabled */
  tmpreg &= (uint32_t)~RTC_TAFCR_TAMPIE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0304 	bic.w	r3, r3, #4
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAFCR = tmpreg;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <memset>:
 8002f12:	4402      	add	r2, r0
 8002f14:	4603      	mov	r3, r0
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d100      	bne.n	8002f1c <memset+0xa>
 8002f1a:	4770      	bx	lr
 8002f1c:	f803 1b01 	strb.w	r1, [r3], #1
 8002f20:	e7f9      	b.n	8002f16 <memset+0x4>
	...

08002f24 <__libc_init_array>:
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	4d0d      	ldr	r5, [pc, #52]	; (8002f5c <__libc_init_array+0x38>)
 8002f28:	4c0d      	ldr	r4, [pc, #52]	; (8002f60 <__libc_init_array+0x3c>)
 8002f2a:	1b64      	subs	r4, r4, r5
 8002f2c:	10a4      	asrs	r4, r4, #2
 8002f2e:	2600      	movs	r6, #0
 8002f30:	42a6      	cmp	r6, r4
 8002f32:	d109      	bne.n	8002f48 <__libc_init_array+0x24>
 8002f34:	4d0b      	ldr	r5, [pc, #44]	; (8002f64 <__libc_init_array+0x40>)
 8002f36:	4c0c      	ldr	r4, [pc, #48]	; (8002f68 <__libc_init_array+0x44>)
 8002f38:	f000 f818 	bl	8002f6c <_init>
 8002f3c:	1b64      	subs	r4, r4, r5
 8002f3e:	10a4      	asrs	r4, r4, #2
 8002f40:	2600      	movs	r6, #0
 8002f42:	42a6      	cmp	r6, r4
 8002f44:	d105      	bne.n	8002f52 <__libc_init_array+0x2e>
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
 8002f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f4c:	4798      	blx	r3
 8002f4e:	3601      	adds	r6, #1
 8002f50:	e7ee      	b.n	8002f30 <__libc_init_array+0xc>
 8002f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f56:	4798      	blx	r3
 8002f58:	3601      	adds	r6, #1
 8002f5a:	e7f2      	b.n	8002f42 <__libc_init_array+0x1e>
 8002f5c:	08002fbc 	.word	0x08002fbc
 8002f60:	08002fbc 	.word	0x08002fbc
 8002f64:	08002fbc 	.word	0x08002fbc
 8002f68:	08002fc0 	.word	0x08002fc0

08002f6c <_init>:
 8002f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6e:	bf00      	nop
 8002f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f72:	bc08      	pop	{r3}
 8002f74:	469e      	mov	lr, r3
 8002f76:	4770      	bx	lr

08002f78 <_fini>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	bf00      	nop
 8002f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7e:	bc08      	pop	{r3}
 8002f80:	469e      	mov	lr, r3
 8002f82:	4770      	bx	lr
