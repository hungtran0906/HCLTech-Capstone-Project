
Level2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000200c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002194  08002194  00012194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021a4  080021a4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080021a4  080021a4  000121a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021ac  080021ac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021ac  080021ac  000121ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021b0  080021b0  000121b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080021b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000000e4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000512d  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000011c4  00000000  00000000  000251b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000548  00000000  00000000  00026378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000003db  00000000  00000000  000268c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d74d  00000000  00000000  00026c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000616f  00000000  00000000  000443e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b3d42  00000000  00000000  0004a557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001438  00000000  00000000  000fe29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  000ff6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800217c 	.word	0x0800217c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800217c 	.word	0x0800217c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 faec 	bl	8000aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f868 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f92c 	bl	800072c <MX_GPIO_Init>
  MX_CAN1_Init();
 80004d4:	f000 f8c2 	bl	800065c <MX_CAN1_Init>
  MX_CAN2_Init();
 80004d8:	f000 f8f4 	bl	80006c4 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
	aData[0]='R';
 80004dc:	4b28      	ldr	r3, [pc, #160]	; (8000580 <main+0xbc>)
 80004de:	2252      	movs	r2, #82	; 0x52
 80004e0:	701a      	strb	r2, [r3, #0]
	aData[1]='e';
 80004e2:	4b27      	ldr	r3, [pc, #156]	; (8000580 <main+0xbc>)
 80004e4:	2265      	movs	r2, #101	; 0x65
 80004e6:	705a      	strb	r2, [r3, #1]
	aData[2]='c';
 80004e8:	4b25      	ldr	r3, [pc, #148]	; (8000580 <main+0xbc>)
 80004ea:	2263      	movs	r2, #99	; 0x63
 80004ec:	709a      	strb	r2, [r3, #2]
	aData[3]='e';
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <main+0xbc>)
 80004f0:	2265      	movs	r2, #101	; 0x65
 80004f2:	70da      	strb	r2, [r3, #3]
	aData[4]='i';
 80004f4:	4b22      	ldr	r3, [pc, #136]	; (8000580 <main+0xbc>)
 80004f6:	2269      	movs	r2, #105	; 0x69
 80004f8:	711a      	strb	r2, [r3, #4]
	aData[5]='v';
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <main+0xbc>)
 80004fc:	2276      	movs	r2, #118	; 0x76
 80004fe:	715a      	strb	r2, [r3, #5]
	aData[6]='e';
 8000500:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <main+0xbc>)
 8000502:	2265      	movs	r2, #101	; 0x65
 8000504:	719a      	strb	r2, [r3, #6]
	aData[7]='d';
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <main+0xbc>)
 8000508:	2264      	movs	r2, #100	; 0x64
 800050a:	71da      	strb	r2, [r3, #7]

	p1header.DLC=8;
 800050c:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <main+0xc0>)
 800050e:	2208      	movs	r2, #8
 8000510:	611a      	str	r2, [r3, #16]
	p1header.IDE=CAN_ID_STD;
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <main+0xc0>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
	p1header.StdId=0x001;
 8000518:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <main+0xc0>)
 800051a:	2201      	movs	r2, #1
 800051c:	601a      	str	r2, [r3, #0]
	p1header.RTR=CAN_RTR_DATA;
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <main+0xc0>)
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]

	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8000524:	4b18      	ldr	r3, [pc, #96]	; (8000588 <main+0xc4>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh=0x00C;
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <main+0xc4>)
 800052c:	220c      	movs	r2, #12
 800052e:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow =0x00A;
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <main+0xc4>)
 8000532:	220a      	movs	r2, #10
 8000534:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh=0;
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <main+0xc4>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow=0;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <main+0xc4>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <main+0xc4>)
 8000544:	2201      	movs	r2, #1
 8000546:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation=ENABLE;
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <main+0xc4>)
 800054a:	2201      	movs	r2, #1
 800054c:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig);
 800054e:	490e      	ldr	r1, [pc, #56]	; (8000588 <main+0xc4>)
 8000550:	480e      	ldr	r0, [pc, #56]	; (800058c <main+0xc8>)
 8000552:	f000 fc15 	bl	8000d80 <HAL_CAN_ConfigFilter>
	//HAL_CAN_ConfigFilter(&hcan2,&sFilterConfig);

	HAL_CAN_Start(&hcan1);
 8000556:	480d      	ldr	r0, [pc, #52]	; (800058c <main+0xc8>)
 8000558:	f000 fcf2 	bl	8000f40 <HAL_CAN_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_CAN_AddTxMessage(&hcan1,&p1header,aData,&pTxMailbox);
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <main+0xcc>)
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <main+0xbc>)
 8000560:	4908      	ldr	r1, [pc, #32]	; (8000584 <main+0xc0>)
 8000562:	480a      	ldr	r0, [pc, #40]	; (800058c <main+0xc8>)
 8000564:	f000 fd30 	bl	8000fc8 <HAL_CAN_AddTxMessage>
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0,&p2header,received_data);
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <main+0xd0>)
 800056a:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <main+0xd4>)
 800056c:	2100      	movs	r1, #0
 800056e:	4807      	ldr	r0, [pc, #28]	; (800058c <main+0xc8>)
 8000570:	f000 fe05 	bl	800117e <HAL_CAN_GetRxMessage>
	Can_id = p1header.StdId;
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <main+0xc0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <main+0xd8>)
 800057c:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1,&p1header,aData,&pTxMailbox);
 800057e:	e7ed      	b.n	800055c <main+0x98>
 8000580:	200000d8 	.word	0x200000d8
 8000584:	2000007c 	.word	0x2000007c
 8000588:	200000b0 	.word	0x200000b0
 800058c:	2000002c 	.word	0x2000002c
 8000590:	20000000 	.word	0x20000000
 8000594:	200000e0 	.word	0x200000e0
 8000598:	20000094 	.word	0x20000094
 800059c:	200000e8 	.word	0x200000e8

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fdb8 	bl	8002124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <SystemClock_Config+0xb4>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <SystemClock_Config+0xb4>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xb4>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <SystemClock_Config+0xb8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <SystemClock_Config+0xb8>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <SystemClock_Config+0xb8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2310      	movs	r3, #16
 8000606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f001 f963 	bl	80018dc <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800061c:	f000 f910 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fbc6 	bl	8001dcc <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000646:	f000 f8fb 	bl	8000840 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	; 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000660:	4b16      	ldr	r3, [pc, #88]	; (80006bc <MX_CAN1_Init+0x60>)
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <MX_CAN1_Init+0x64>)
 8000664:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_CAN1_Init+0x60>)
 8000668:	2210      	movs	r2, #16
 800066a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_CAN1_Init+0x60>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_CAN1_Init+0x60>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_CAN1_Init+0x60>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_CAN1_Init+0x60>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_CAN1_Init+0x60>)
 8000686:	2200      	movs	r2, #0
 8000688:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_CAN1_Init+0x60>)
 800068c:	2200      	movs	r2, #0
 800068e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_CAN1_Init+0x60>)
 8000692:	2200      	movs	r2, #0
 8000694:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_CAN1_Init+0x60>)
 8000698:	2200      	movs	r2, #0
 800069a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_CAN1_Init+0x60>)
 800069e:	2200      	movs	r2, #0
 80006a0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_CAN1_Init+0x60>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_CAN1_Init+0x60>)
 80006aa:	f000 fa6d 	bl	8000b88 <HAL_CAN_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006b4:	f000 f8c4 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000002c 	.word	0x2000002c
 80006c0:	40006400 	.word	0x40006400

080006c4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_CAN2_Init+0x60>)
 80006ca:	4a17      	ldr	r2, [pc, #92]	; (8000728 <MX_CAN2_Init+0x64>)
 80006cc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_CAN2_Init+0x60>)
 80006d0:	2210      	movs	r2, #16
 80006d2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_CAN2_Init+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_CAN2_Init+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_CAN2_Init+0x60>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_CAN2_Init+0x60>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_CAN2_Init+0x60>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_CAN2_Init+0x60>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <MX_CAN2_Init+0x60>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_CAN2_Init+0x60>)
 8000700:	2200      	movs	r2, #0
 8000702:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_CAN2_Init+0x60>)
 8000706:	2200      	movs	r2, #0
 8000708:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_CAN2_Init+0x60>)
 800070c:	2200      	movs	r2, #0
 800070e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_CAN2_Init+0x60>)
 8000712:	f000 fa39 	bl	8000b88 <HAL_CAN_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 800071c:	f000 f890 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000054 	.word	0x20000054
 8000728:	40006800 	.word	0x40006800

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <MX_GPIO_Init+0x104>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a39      	ldr	r2, [pc, #228]	; (8000830 <MX_GPIO_Init+0x104>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b37      	ldr	r3, [pc, #220]	; (8000830 <MX_GPIO_Init+0x104>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b33      	ldr	r3, [pc, #204]	; (8000830 <MX_GPIO_Init+0x104>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a32      	ldr	r2, [pc, #200]	; (8000830 <MX_GPIO_Init+0x104>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b30      	ldr	r3, [pc, #192]	; (8000830 <MX_GPIO_Init+0x104>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_GPIO_Init+0x104>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a2b      	ldr	r2, [pc, #172]	; (8000830 <MX_GPIO_Init+0x104>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b29      	ldr	r3, [pc, #164]	; (8000830 <MX_GPIO_Init+0x104>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <MX_GPIO_Init+0x104>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a24      	ldr	r2, [pc, #144]	; (8000830 <MX_GPIO_Init+0x104>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <MX_GPIO_Init+0x104>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STB1_Pin|STB2_Pin|D0_Pin|D1_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2139      	movs	r1, #57	; 0x39
 80007b6:	481f      	ldr	r0, [pc, #124]	; (8000834 <MX_GPIO_Init+0x108>)
 80007b8:	f001 f876 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|EN_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2103      	movs	r1, #3
 80007c0:	481d      	ldr	r0, [pc, #116]	; (8000838 <MX_GPIO_Init+0x10c>)
 80007c2:	f001 f871 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D2_Pin|D3_Pin|D4_Pin|D5_Pin
 80007c6:	2200      	movs	r2, #0
 80007c8:	f24f 0103 	movw	r1, #61443	; 0xf003
 80007cc:	481b      	ldr	r0, [pc, #108]	; (800083c <MX_GPIO_Init+0x110>)
 80007ce:	f001 f86b 	bl	80018a8 <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STB1_Pin STB2_Pin D0_Pin D1_Pin */
  GPIO_InitStruct.Pin = STB1_Pin|STB2_Pin|D0_Pin|D1_Pin;
 80007d2:	2339      	movs	r3, #57	; 0x39
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	4812      	ldr	r0, [pc, #72]	; (8000834 <MX_GPIO_Init+0x108>)
 80007ea:	f000 fec1 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_Pin|EN_Pin;
 80007ee:	2303      	movs	r3, #3
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_GPIO_Init+0x10c>)
 8000806:	f000 feb3 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D4_Pin|D5_Pin
 800080a:	f24f 0303 	movw	r3, #61443	; 0xf003
 800080e:	617b      	str	r3, [r7, #20]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <MX_GPIO_Init+0x110>)
 8000824:	f000 fea4 	bl	8001570 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020800 	.word	0x40020800
 8000838:	40020000 	.word	0x40020000
 800083c:	40020400 	.word	0x40020400

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <HAL_MspInit+0x4c>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	6453      	str	r3, [r2, #68]	; 0x44
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a42      	ldr	r2, [pc, #264]	; (80009c4 <HAL_CAN_MspInit+0x128>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d136      	bne.n	800092c <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80008be:	4b42      	ldr	r3, [pc, #264]	; (80009c8 <HAL_CAN_MspInit+0x12c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a40      	ldr	r2, [pc, #256]	; (80009c8 <HAL_CAN_MspInit+0x12c>)
 80008c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80008c8:	4b3f      	ldr	r3, [pc, #252]	; (80009c8 <HAL_CAN_MspInit+0x12c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d10d      	bne.n	80008ec <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	4b3d      	ldr	r3, [pc, #244]	; (80009cc <HAL_CAN_MspInit+0x130>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a3c      	ldr	r2, [pc, #240]	; (80009cc <HAL_CAN_MspInit+0x130>)
 80008da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
 80008e0:	4b3a      	ldr	r3, [pc, #232]	; (80009cc <HAL_CAN_MspInit+0x130>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008e8:	61bb      	str	r3, [r7, #24]
 80008ea:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	4b36      	ldr	r3, [pc, #216]	; (80009cc <HAL_CAN_MspInit+0x130>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	4a35      	ldr	r2, [pc, #212]	; (80009cc <HAL_CAN_MspInit+0x130>)
 80008f6:	f043 0302 	orr.w	r3, r3, #2
 80008fa:	6313      	str	r3, [r2, #48]	; 0x30
 80008fc:	4b33      	ldr	r3, [pc, #204]	; (80009cc <HAL_CAN_MspInit+0x130>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	f003 0302 	and.w	r3, r3, #2
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000908:	f44f 7340 	mov.w	r3, #768	; 0x300
 800090c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800091a:	2309      	movs	r3, #9
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	482a      	ldr	r0, [pc, #168]	; (80009d0 <HAL_CAN_MspInit+0x134>)
 8000926:	f000 fe23 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800092a:	e047      	b.n	80009bc <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a28      	ldr	r2, [pc, #160]	; (80009d4 <HAL_CAN_MspInit+0x138>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d142      	bne.n	80009bc <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b24      	ldr	r3, [pc, #144]	; (80009cc <HAL_CAN_MspInit+0x130>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a23      	ldr	r2, [pc, #140]	; (80009cc <HAL_CAN_MspInit+0x130>)
 8000940:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <HAL_CAN_MspInit+0x130>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <HAL_CAN_MspInit+0x12c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <HAL_CAN_MspInit+0x12c>)
 800095a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <HAL_CAN_MspInit+0x12c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d10d      	bne.n	8000980 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <HAL_CAN_MspInit+0x130>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	4a17      	ldr	r2, [pc, #92]	; (80009cc <HAL_CAN_MspInit+0x130>)
 800096e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000972:	6413      	str	r3, [r2, #64]	; 0x40
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <HAL_CAN_MspInit+0x130>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <HAL_CAN_MspInit+0x130>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	4a10      	ldr	r2, [pc, #64]	; (80009cc <HAL_CAN_MspInit+0x130>)
 800098a:	f043 0302 	orr.w	r3, r3, #2
 800098e:	6313      	str	r3, [r2, #48]	; 0x30
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_CAN_MspInit+0x130>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	f003 0302 	and.w	r3, r3, #2
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800099c:	2360      	movs	r3, #96	; 0x60
 800099e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80009ac:	2309      	movs	r3, #9
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <HAL_CAN_MspInit+0x134>)
 80009b8:	f000 fdda 	bl	8001570 <HAL_GPIO_Init>
}
 80009bc:	bf00      	nop
 80009be:	3730      	adds	r7, #48	; 0x30
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40006400 	.word	0x40006400
 80009c8:	200000ec 	.word	0x200000ec
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020400 	.word	0x40020400
 80009d4:	40006800 	.word	0x40006800

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f890 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <SystemInit+0x20>)
 8000a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <SystemInit+0x20>)
 8000a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a56:	490e      	ldr	r1, [pc, #56]	; (8000a90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a58:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a6c:	4c0b      	ldr	r4, [pc, #44]	; (8000a9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a7a:	f7ff ffd7 	bl	8000a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f001 fb59 	bl	8002134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fd1f 	bl	80004c4 <main>
  bx  lr    
 8000a86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a94:	080021b4 	.word	0x080021b4
  ldr r2, =_sbss
 8000a98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a9c:	200000f4 	.word	0x200000f4

08000aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <HAL_Init+0x40>)
 8000aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_Init+0x40>)
 8000aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_Init+0x40>)
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 fd1b 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	f000 f808 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff feb8 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023c00 	.word	0x40023c00

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x54>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x58>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fd25 	bl	8001556 <HAL_SYSTICK_Config>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00e      	b.n	8000b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d80a      	bhi.n	8000b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f000 fcfb 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_InitTick+0x5c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000004 	.word	0x20000004
 8000b40:	2000000c 	.word	0x2000000c
 8000b44:	20000008 	.word	0x20000008

08000b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x20>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x24>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_IncTick+0x24>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	2000000c 	.word	0x2000000c
 8000b6c:	200000f0 	.word	0x200000f0

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200000f0 	.word	0x200000f0

08000b88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e0ed      	b.n	8000d76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff fe78 	bl	800089c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f042 0201 	orr.w	r2, r2, #1
 8000bba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bbc:	f7ff ffd8 	bl	8000b70 <HAL_GetTick>
 8000bc0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bc2:	e012      	b.n	8000bea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bc4:	f7ff ffd4 	bl	8000b70 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	2b0a      	cmp	r3, #10
 8000bd0:	d90b      	bls.n	8000bea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2205      	movs	r2, #5
 8000be2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e0c5      	b.n	8000d76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0e5      	beq.n	8000bc4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f022 0202 	bic.w	r2, r2, #2
 8000c06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c08:	f7ff ffb2 	bl	8000b70 <HAL_GetTick>
 8000c0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c0e:	e012      	b.n	8000c36 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c10:	f7ff ffae 	bl	8000b70 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b0a      	cmp	r3, #10
 8000c1c:	d90b      	bls.n	8000c36 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2205      	movs	r2, #5
 8000c2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e09f      	b.n	8000d76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1e5      	bne.n	8000c10 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7e1b      	ldrb	r3, [r3, #24]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d108      	bne.n	8000c5e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	e007      	b.n	8000c6e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7e5b      	ldrb	r3, [r3, #25]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d108      	bne.n	8000c88 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e007      	b.n	8000c98 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7e9b      	ldrb	r3, [r3, #26]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d108      	bne.n	8000cb2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f042 0220 	orr.w	r2, r2, #32
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	e007      	b.n	8000cc2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 0220 	bic.w	r2, r2, #32
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7edb      	ldrb	r3, [r3, #27]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d108      	bne.n	8000cdc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f022 0210 	bic.w	r2, r2, #16
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	e007      	b.n	8000cec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f042 0210 	orr.w	r2, r2, #16
 8000cea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7f1b      	ldrb	r3, [r3, #28]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d108      	bne.n	8000d06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f042 0208 	orr.w	r2, r2, #8
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	e007      	b.n	8000d16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f022 0208 	bic.w	r2, r2, #8
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	7f5b      	ldrb	r3, [r3, #29]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d108      	bne.n	8000d30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f042 0204 	orr.w	r2, r2, #4
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	e007      	b.n	8000d40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0204 	bic.w	r2, r2, #4
 8000d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	ea42 0103 	orr.w	r1, r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	1e5a      	subs	r2, r3, #1
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	430a      	orrs	r2, r1
 8000d64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d96:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d98:	7cfb      	ldrb	r3, [r7, #19]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d003      	beq.n	8000da6 <HAL_CAN_ConfigFilter+0x26>
 8000d9e:	7cfb      	ldrb	r3, [r7, #19]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	f040 80be 	bne.w	8000f22 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000da6:	4b65      	ldr	r3, [pc, #404]	; (8000f3c <HAL_CAN_ConfigFilter+0x1bc>)
 8000da8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000db0:	f043 0201 	orr.w	r2, r3, #1
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dc0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f003 031f 	and.w	r3, r3, #31
 8000de6:	2201      	movs	r2, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	401a      	ands	r2, r3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	69db      	ldr	r3, [r3, #28]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d123      	bne.n	8000e50 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e2a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3248      	adds	r2, #72	; 0x48
 8000e30:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e44:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e46:	6979      	ldr	r1, [r7, #20]
 8000e48:	3348      	adds	r3, #72	; 0x48
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	440b      	add	r3, r1
 8000e4e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d122      	bne.n	8000e9e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	431a      	orrs	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e78:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3248      	adds	r2, #72	; 0x48
 8000e7e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e92:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e94:	6979      	ldr	r1, [r7, #20]
 8000e96:	3348      	adds	r3, #72	; 0x48
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	440b      	add	r3, r1
 8000e9c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d109      	bne.n	8000eba <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000eb8:	e007      	b.n	8000eca <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d109      	bne.n	8000ee6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	401a      	ands	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000ee4:	e007      	b.n	8000ef6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d107      	bne.n	8000f0e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	431a      	orrs	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f14:	f023 0201 	bic.w	r2, r3, #1
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e006      	b.n	8000f30 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
  }
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	40006400 	.word	0x40006400

08000f40 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d12e      	bne.n	8000fb2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2202      	movs	r2, #2
 8000f58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 0201 	bic.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f6c:	f7ff fe00 	bl	8000b70 <HAL_GetTick>
 8000f70:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f72:	e012      	b.n	8000f9a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f74:	f7ff fdfc 	bl	8000b70 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b0a      	cmp	r3, #10
 8000f80:	d90b      	bls.n	8000f9a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2205      	movs	r2, #5
 8000f92:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e012      	b.n	8000fc0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1e5      	bne.n	8000f74 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e006      	b.n	8000fc0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
  }
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fdc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fe6:	7ffb      	ldrb	r3, [r7, #31]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d003      	beq.n	8000ff4 <HAL_CAN_AddTxMessage+0x2c>
 8000fec:	7ffb      	ldrb	r3, [r7, #31]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	f040 80b8 	bne.w	8001164 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10a      	bne.n	8001014 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001004:	2b00      	cmp	r3, #0
 8001006:	d105      	bne.n	8001014 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 80a0 	beq.w	8001154 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	0e1b      	lsrs	r3, r3, #24
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d907      	bls.n	8001034 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e09e      	b.n	8001172 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001034:	2201      	movs	r2, #1
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	409a      	lsls	r2, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10d      	bne.n	8001062 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001050:	68f9      	ldr	r1, [r7, #12]
 8001052:	6809      	ldr	r1, [r1, #0]
 8001054:	431a      	orrs	r2, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3318      	adds	r3, #24
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	440b      	add	r3, r1
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	e00f      	b.n	8001082 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800106c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001072:	68f9      	ldr	r1, [r7, #12]
 8001074:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001076:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	3318      	adds	r3, #24
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	440b      	add	r3, r1
 8001080:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6819      	ldr	r1, [r3, #0]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3318      	adds	r3, #24
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	440b      	add	r3, r1
 8001092:	3304      	adds	r3, #4
 8001094:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	7d1b      	ldrb	r3, [r3, #20]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d111      	bne.n	80010c2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3318      	adds	r3, #24
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	4413      	add	r3, r2
 80010aa:	3304      	adds	r3, #4
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	6811      	ldr	r1, [r2, #0]
 80010b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3318      	adds	r3, #24
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	440b      	add	r3, r1
 80010be:	3304      	adds	r3, #4
 80010c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3307      	adds	r3, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	061a      	lsls	r2, r3, #24
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3306      	adds	r3, #6
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	041b      	lsls	r3, r3, #16
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3305      	adds	r3, #5
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	4313      	orrs	r3, r2
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	3204      	adds	r2, #4
 80010e2:	7812      	ldrb	r2, [r2, #0]
 80010e4:	4610      	mov	r0, r2
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	6811      	ldr	r1, [r2, #0]
 80010ea:	ea43 0200 	orr.w	r2, r3, r0
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	440b      	add	r3, r1
 80010f4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80010f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3303      	adds	r3, #3
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	061a      	lsls	r2, r3, #24
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3302      	adds	r3, #2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	041b      	lsls	r3, r3, #16
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3301      	adds	r3, #1
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	4313      	orrs	r3, r2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	4610      	mov	r0, r2
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	6811      	ldr	r1, [r2, #0]
 8001120:	ea43 0200 	orr.w	r2, r3, r0
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	440b      	add	r3, r1
 800112a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800112e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3318      	adds	r3, #24
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	4413      	add	r3, r2
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	6811      	ldr	r1, [r2, #0]
 8001142:	f043 0201 	orr.w	r2, r3, #1
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3318      	adds	r3, #24
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	440b      	add	r3, r1
 800114e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	e00e      	b.n	8001172 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e006      	b.n	8001172 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
  }
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800117e:	b480      	push	{r7}
 8001180:	b087      	sub	sp, #28
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001192:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d003      	beq.n	80011a2 <HAL_CAN_GetRxMessage+0x24>
 800119a:	7dfb      	ldrb	r3, [r7, #23]
 800119c:	2b02      	cmp	r3, #2
 800119e:	f040 80f3 	bne.w	8001388 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10e      	bne.n	80011c6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d116      	bne.n	80011e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e0e7      	b.n	8001396 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d107      	bne.n	80011e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0d8      	b.n	8001396 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	331b      	adds	r3, #27
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	4413      	add	r3, r2
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0204 	and.w	r2, r3, #4
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10c      	bne.n	800121c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	331b      	adds	r3, #27
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	4413      	add	r3, r2
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	0d5b      	lsrs	r3, r3, #21
 8001212:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	e00b      	b.n	8001234 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	331b      	adds	r3, #27
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4413      	add	r3, r2
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	08db      	lsrs	r3, r3, #3
 800122c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	331b      	adds	r3, #27
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	4413      	add	r3, r2
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0202 	and.w	r2, r3, #2
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	331b      	adds	r3, #27
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	4413      	add	r3, r2
 8001256:	3304      	adds	r3, #4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 020f 	and.w	r2, r3, #15
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	331b      	adds	r3, #27
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	4413      	add	r3, r2
 800126e:	3304      	adds	r3, #4
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	0a1b      	lsrs	r3, r3, #8
 8001274:	b2da      	uxtb	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	331b      	adds	r3, #27
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	4413      	add	r3, r2
 8001286:	3304      	adds	r3, #4
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	0c1b      	lsrs	r3, r3, #16
 800128c:	b29a      	uxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	4413      	add	r3, r2
 800129c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	4413      	add	r3, r2
 80012b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0a1a      	lsrs	r2, r3, #8
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	4413      	add	r3, r2
 80012cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	0c1a      	lsrs	r2, r3, #16
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	3302      	adds	r3, #2
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	4413      	add	r3, r2
 80012e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	0e1a      	lsrs	r2, r3, #24
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	3303      	adds	r3, #3
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	4413      	add	r3, r2
 8001300:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	3304      	adds	r3, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	4413      	add	r3, r2
 8001318:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	0a1a      	lsrs	r2, r3, #8
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	3305      	adds	r3, #5
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4413      	add	r3, r2
 8001332:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	0c1a      	lsrs	r2, r3, #16
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3306      	adds	r3, #6
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	4413      	add	r3, r2
 800134c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	0e1a      	lsrs	r2, r3, #24
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	3307      	adds	r3, #7
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d108      	bne.n	8001374 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 0220 	orr.w	r2, r2, #32
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	e007      	b.n	8001384 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	691a      	ldr	r2, [r3, #16]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0220 	orr.w	r2, r2, #32
 8001382:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	e006      	b.n	8001396 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
  }
}
 8001396:	4618      	mov	r0, r3
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff8e 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff47 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff5c 	bl	80013ec <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff8e 	bl	800145c <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5d 	bl	8001408 <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffb0 	bl	80014c4 <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	e16b      	b.n	8001864 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800158c:	2201      	movs	r2, #1
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	f040 815a 	bne.w	800185e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d005      	beq.n	80015c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d130      	bne.n	8001624 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2203      	movs	r2, #3
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f8:	2201      	movs	r2, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 0201 	and.w	r2, r3, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b03      	cmp	r3, #3
 800162e:	d017      	beq.n	8001660 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	2203      	movs	r2, #3
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d123      	bne.n	80016b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	08da      	lsrs	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3208      	adds	r2, #8
 8001674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	220f      	movs	r2, #15
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	08da      	lsrs	r2, r3, #3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3208      	adds	r2, #8
 80016ae:	69b9      	ldr	r1, [r7, #24]
 80016b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0203 	and.w	r2, r3, #3
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80b4 	beq.w	800185e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b60      	ldr	r3, [pc, #384]	; (800187c <HAL_GPIO_Init+0x30c>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	4a5f      	ldr	r2, [pc, #380]	; (800187c <HAL_GPIO_Init+0x30c>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001704:	6453      	str	r3, [r2, #68]	; 0x44
 8001706:	4b5d      	ldr	r3, [pc, #372]	; (800187c <HAL_GPIO_Init+0x30c>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001712:	4a5b      	ldr	r2, [pc, #364]	; (8001880 <HAL_GPIO_Init+0x310>)
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a52      	ldr	r2, [pc, #328]	; (8001884 <HAL_GPIO_Init+0x314>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d02b      	beq.n	8001796 <HAL_GPIO_Init+0x226>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a51      	ldr	r2, [pc, #324]	; (8001888 <HAL_GPIO_Init+0x318>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d025      	beq.n	8001792 <HAL_GPIO_Init+0x222>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a50      	ldr	r2, [pc, #320]	; (800188c <HAL_GPIO_Init+0x31c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d01f      	beq.n	800178e <HAL_GPIO_Init+0x21e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4f      	ldr	r2, [pc, #316]	; (8001890 <HAL_GPIO_Init+0x320>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d019      	beq.n	800178a <HAL_GPIO_Init+0x21a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4e      	ldr	r2, [pc, #312]	; (8001894 <HAL_GPIO_Init+0x324>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d013      	beq.n	8001786 <HAL_GPIO_Init+0x216>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4d      	ldr	r2, [pc, #308]	; (8001898 <HAL_GPIO_Init+0x328>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00d      	beq.n	8001782 <HAL_GPIO_Init+0x212>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4c      	ldr	r2, [pc, #304]	; (800189c <HAL_GPIO_Init+0x32c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d007      	beq.n	800177e <HAL_GPIO_Init+0x20e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4b      	ldr	r2, [pc, #300]	; (80018a0 <HAL_GPIO_Init+0x330>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_GPIO_Init+0x20a>
 8001776:	2307      	movs	r3, #7
 8001778:	e00e      	b.n	8001798 <HAL_GPIO_Init+0x228>
 800177a:	2308      	movs	r3, #8
 800177c:	e00c      	b.n	8001798 <HAL_GPIO_Init+0x228>
 800177e:	2306      	movs	r3, #6
 8001780:	e00a      	b.n	8001798 <HAL_GPIO_Init+0x228>
 8001782:	2305      	movs	r3, #5
 8001784:	e008      	b.n	8001798 <HAL_GPIO_Init+0x228>
 8001786:	2304      	movs	r3, #4
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x228>
 800178a:	2303      	movs	r3, #3
 800178c:	e004      	b.n	8001798 <HAL_GPIO_Init+0x228>
 800178e:	2302      	movs	r3, #2
 8001790:	e002      	b.n	8001798 <HAL_GPIO_Init+0x228>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_GPIO_Init+0x228>
 8001796:	2300      	movs	r3, #0
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	f002 0203 	and.w	r2, r2, #3
 800179e:	0092      	lsls	r2, r2, #2
 80017a0:	4093      	lsls	r3, r2
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a8:	4935      	ldr	r1, [pc, #212]	; (8001880 <HAL_GPIO_Init+0x310>)
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	089b      	lsrs	r3, r3, #2
 80017ae:	3302      	adds	r3, #2
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b6:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <HAL_GPIO_Init+0x334>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017da:	4a32      	ldr	r2, [pc, #200]	; (80018a4 <HAL_GPIO_Init+0x334>)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e0:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <HAL_GPIO_Init+0x334>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001804:	4a27      	ldr	r2, [pc, #156]	; (80018a4 <HAL_GPIO_Init+0x334>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_GPIO_Init+0x334>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800182e:	4a1d      	ldr	r2, [pc, #116]	; (80018a4 <HAL_GPIO_Init+0x334>)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_GPIO_Init+0x334>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001858:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <HAL_GPIO_Init+0x334>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3301      	adds	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	2b0f      	cmp	r3, #15
 8001868:	f67f ae90 	bls.w	800158c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3724      	adds	r7, #36	; 0x24
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	40013800 	.word	0x40013800
 8001884:	40020000 	.word	0x40020000
 8001888:	40020400 	.word	0x40020400
 800188c:	40020800 	.word	0x40020800
 8001890:	40020c00 	.word	0x40020c00
 8001894:	40021000 	.word	0x40021000
 8001898:	40021400 	.word	0x40021400
 800189c:	40021800 	.word	0x40021800
 80018a0:	40021c00 	.word	0x40021c00
 80018a4:	40013c00 	.word	0x40013c00

080018a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
 80018b4:	4613      	mov	r3, r2
 80018b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b8:	787b      	ldrb	r3, [r7, #1]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018c4:	e003      	b.n	80018ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018c6:	887b      	ldrh	r3, [r7, #2]
 80018c8:	041a      	lsls	r2, r3, #16
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	619a      	str	r2, [r3, #24]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e267      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d075      	beq.n	80019e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018fa:	4b88      	ldr	r3, [pc, #544]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b04      	cmp	r3, #4
 8001904:	d00c      	beq.n	8001920 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001906:	4b85      	ldr	r3, [pc, #532]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800190e:	2b08      	cmp	r3, #8
 8001910:	d112      	bne.n	8001938 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001912:	4b82      	ldr	r3, [pc, #520]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800191e:	d10b      	bne.n	8001938 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	4b7e      	ldr	r3, [pc, #504]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d05b      	beq.n	80019e4 <HAL_RCC_OscConfig+0x108>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d157      	bne.n	80019e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e242      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001940:	d106      	bne.n	8001950 <HAL_RCC_OscConfig+0x74>
 8001942:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a75      	ldr	r2, [pc, #468]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e01d      	b.n	800198c <HAL_RCC_OscConfig+0xb0>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x98>
 800195a:	4b70      	ldr	r3, [pc, #448]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a6f      	ldr	r2, [pc, #444]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b6d      	ldr	r3, [pc, #436]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a6c      	ldr	r2, [pc, #432]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 800196c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0xb0>
 8001974:	4b69      	ldr	r3, [pc, #420]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a68      	ldr	r2, [pc, #416]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 800197a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a65      	ldr	r2, [pc, #404]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d013      	beq.n	80019bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff f8ec 	bl	8000b70 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff f8e8 	bl	8000b70 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e207      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b5b      	ldr	r3, [pc, #364]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0xc0>
 80019ba:	e014      	b.n	80019e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff f8d8 	bl	8000b70 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff f8d4 	bl	8000b70 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e1f3      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d6:	4b51      	ldr	r3, [pc, #324]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0xe8>
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d063      	beq.n	8001aba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d11c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0a:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d116      	bne.n	8001a44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a16:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <HAL_RCC_OscConfig+0x152>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e1c7      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4937      	ldr	r1, [pc, #220]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a42:	e03a      	b.n	8001aba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d020      	beq.n	8001a8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a4c:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <HAL_RCC_OscConfig+0x244>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7ff f88d 	bl	8000b70 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5a:	f7ff f889 	bl	8000b70 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1a8      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4925      	ldr	r1, [pc, #148]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	600b      	str	r3, [r1, #0]
 8001a8c:	e015      	b.n	8001aba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_RCC_OscConfig+0x244>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f86c 	bl	8000b70 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff f868 	bl	8000b70 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e187      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d036      	beq.n	8001b34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d016      	beq.n	8001afc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_RCC_OscConfig+0x248>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f84c 	bl	8000b70 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001adc:	f7ff f848 	bl	8000b70 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e167      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x200>
 8001afa:	e01b      	b.n	8001b34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_RCC_OscConfig+0x248>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b02:	f7ff f835 	bl	8000b70 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	e00e      	b.n	8001b28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b0a:	f7ff f831 	bl	8000b70 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d907      	bls.n	8001b28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e150      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	42470000 	.word	0x42470000
 8001b24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b28:	4b88      	ldr	r3, [pc, #544]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1ea      	bne.n	8001b0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 8097 	beq.w	8001c70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b46:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10f      	bne.n	8001b72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	4b7d      	ldr	r3, [pc, #500]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a7c      	ldr	r2, [pc, #496]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b7a      	ldr	r3, [pc, #488]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	4b77      	ldr	r3, [pc, #476]	; (8001d50 <HAL_RCC_OscConfig+0x474>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d118      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7e:	4b74      	ldr	r3, [pc, #464]	; (8001d50 <HAL_RCC_OscConfig+0x474>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a73      	ldr	r2, [pc, #460]	; (8001d50 <HAL_RCC_OscConfig+0x474>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8a:	f7fe fff1 	bl	8000b70 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b92:	f7fe ffed 	bl	8000b70 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e10c      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	4b6a      	ldr	r3, [pc, #424]	; (8001d50 <HAL_RCC_OscConfig+0x474>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x2ea>
 8001bb8:	4b64      	ldr	r3, [pc, #400]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	4a63      	ldr	r2, [pc, #396]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc4:	e01c      	b.n	8001c00 <HAL_RCC_OscConfig+0x324>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b05      	cmp	r3, #5
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x30c>
 8001bce:	4b5f      	ldr	r3, [pc, #380]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	4a5e      	ldr	r2, [pc, #376]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bda:	4b5c      	ldr	r3, [pc, #368]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	4a5b      	ldr	r2, [pc, #364]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6713      	str	r3, [r2, #112]	; 0x70
 8001be6:	e00b      	b.n	8001c00 <HAL_RCC_OscConfig+0x324>
 8001be8:	4b58      	ldr	r3, [pc, #352]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bec:	4a57      	ldr	r2, [pc, #348]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf4:	4b55      	ldr	r3, [pc, #340]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf8:	4a54      	ldr	r2, [pc, #336]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bfa:	f023 0304 	bic.w	r3, r3, #4
 8001bfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d015      	beq.n	8001c34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c08:	f7fe ffb2 	bl	8000b70 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c10:	f7fe ffae 	bl	8000b70 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e0cb      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c26:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0ee      	beq.n	8001c10 <HAL_RCC_OscConfig+0x334>
 8001c32:	e014      	b.n	8001c5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7fe ff9c 	bl	8000b70 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f7fe ff98 	bl	8000b70 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e0b5      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1ee      	bne.n	8001c3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d105      	bne.n	8001c70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c64:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	4a38      	ldr	r2, [pc, #224]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80a1 	beq.w	8001dbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d05c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d141      	bne.n	8001d12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_RCC_OscConfig+0x478>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7fe ff6c 	bl	8000b70 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7fe ff68 	bl	8000b70 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e087      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cae:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69da      	ldr	r2, [r3, #28]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	019b      	lsls	r3, r3, #6
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	491b      	ldr	r1, [pc, #108]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x478>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cea:	f7fe ff41 	bl	8000b70 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7fe ff3d 	bl	8000b70 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e05c      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x416>
 8001d10:	e054      	b.n	8001dbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_RCC_OscConfig+0x478>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7fe ff2a 	bl	8000b70 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d20:	f7fe ff26 	bl	8000b70 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e045      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x444>
 8001d3e:	e03d      	b.n	8001dbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e038      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40007000 	.word	0x40007000
 8001d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x4ec>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d028      	beq.n	8001db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d121      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d11a      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d88:	4013      	ands	r3, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d111      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	3b01      	subs	r3, #1
 8001da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800

08001dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0cc      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de0:	4b68      	ldr	r3, [pc, #416]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d90c      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b65      	ldr	r3, [pc, #404]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0b8      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e20:	4b59      	ldr	r3, [pc, #356]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e38:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	494d      	ldr	r1, [pc, #308]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d044      	beq.n	8001eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d119      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e07f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d003      	beq.n	8001e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e06f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e067      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eaa:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f023 0203 	bic.w	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4934      	ldr	r1, [pc, #208]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ebc:	f7fe fe58 	bl	8000b70 <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec4:	f7fe fe54 	bl	8000b70 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e04f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 020c 	and.w	r2, r3, #12
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d1eb      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eec:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d20c      	bcs.n	8001f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e032      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4916      	ldr	r1, [pc, #88]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	490e      	ldr	r1, [pc, #56]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f52:	f000 f821 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8001f56:	4602      	mov	r2, r0
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	490a      	ldr	r1, [pc, #40]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	5ccb      	ldrb	r3, [r1, r3]
 8001f66:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_ClockConfig+0x1c8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fdb8 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023c00 	.word	0x40023c00
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	08002194 	.word	0x08002194
 8001f90:	20000004 	.word	0x20000004
 8001f94:	20000008 	.word	0x20000008

08001f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f9c:	b090      	sub	sp, #64	; 0x40
 8001f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fa8:	2300      	movs	r3, #0
 8001faa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fb0:	4b59      	ldr	r3, [pc, #356]	; (8002118 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d00d      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	f200 80a1 	bhi.w	8002104 <HAL_RCC_GetSysClockFreq+0x16c>
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x34>
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fca:	e09b      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fcc:	4b53      	ldr	r3, [pc, #332]	; (800211c <HAL_RCC_GetSysClockFreq+0x184>)
 8001fce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001fd0:	e09b      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fd2:	4b53      	ldr	r3, [pc, #332]	; (8002120 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fd6:	e098      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fd8:	4b4f      	ldr	r3, [pc, #316]	; (8002118 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fe0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fe2:	4b4d      	ldr	r3, [pc, #308]	; (8002118 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d028      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fee:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	099b      	lsrs	r3, r3, #6
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	623b      	str	r3, [r7, #32]
 8001ff8:	627a      	str	r2, [r7, #36]	; 0x24
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002000:	2100      	movs	r1, #0
 8002002:	4b47      	ldr	r3, [pc, #284]	; (8002120 <HAL_RCC_GetSysClockFreq+0x188>)
 8002004:	fb03 f201 	mul.w	r2, r3, r1
 8002008:	2300      	movs	r3, #0
 800200a:	fb00 f303 	mul.w	r3, r0, r3
 800200e:	4413      	add	r3, r2
 8002010:	4a43      	ldr	r2, [pc, #268]	; (8002120 <HAL_RCC_GetSysClockFreq+0x188>)
 8002012:	fba0 1202 	umull	r1, r2, r0, r2
 8002016:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002018:	460a      	mov	r2, r1
 800201a:	62ba      	str	r2, [r7, #40]	; 0x28
 800201c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800201e:	4413      	add	r3, r2
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002024:	2200      	movs	r2, #0
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	61fa      	str	r2, [r7, #28]
 800202a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800202e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002032:	f7fe f8c9 	bl	80001c8 <__aeabi_uldivmod>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4613      	mov	r3, r2
 800203c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800203e:	e053      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002040:	4b35      	ldr	r3, [pc, #212]	; (8002118 <HAL_RCC_GetSysClockFreq+0x180>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	2200      	movs	r2, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	617a      	str	r2, [r7, #20]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002052:	f04f 0b00 	mov.w	fp, #0
 8002056:	4652      	mov	r2, sl
 8002058:	465b      	mov	r3, fp
 800205a:	f04f 0000 	mov.w	r0, #0
 800205e:	f04f 0100 	mov.w	r1, #0
 8002062:	0159      	lsls	r1, r3, #5
 8002064:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002068:	0150      	lsls	r0, r2, #5
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	ebb2 080a 	subs.w	r8, r2, sl
 8002072:	eb63 090b 	sbc.w	r9, r3, fp
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002082:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002086:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800208a:	ebb2 0408 	subs.w	r4, r2, r8
 800208e:	eb63 0509 	sbc.w	r5, r3, r9
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	00eb      	lsls	r3, r5, #3
 800209c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020a0:	00e2      	lsls	r2, r4, #3
 80020a2:	4614      	mov	r4, r2
 80020a4:	461d      	mov	r5, r3
 80020a6:	eb14 030a 	adds.w	r3, r4, sl
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	eb45 030b 	adc.w	r3, r5, fp
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020be:	4629      	mov	r1, r5
 80020c0:	028b      	lsls	r3, r1, #10
 80020c2:	4621      	mov	r1, r4
 80020c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020c8:	4621      	mov	r1, r4
 80020ca:	028a      	lsls	r2, r1, #10
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d2:	2200      	movs	r2, #0
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	60fa      	str	r2, [r7, #12]
 80020d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020dc:	f7fe f874 	bl	80001c8 <__aeabi_uldivmod>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4613      	mov	r3, r2
 80020e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_GetSysClockFreq+0x180>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	0c1b      	lsrs	r3, r3, #16
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	3301      	adds	r3, #1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80020f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002102:	e002      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_RCC_GetSysClockFreq+0x184>)
 8002106:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800210c:	4618      	mov	r0, r3
 800210e:	3740      	adds	r7, #64	; 0x40
 8002110:	46bd      	mov	sp, r7
 8002112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800
 800211c:	00f42400 	.word	0x00f42400
 8002120:	017d7840 	.word	0x017d7840

08002124 <memset>:
 8002124:	4402      	add	r2, r0
 8002126:	4603      	mov	r3, r0
 8002128:	4293      	cmp	r3, r2
 800212a:	d100      	bne.n	800212e <memset+0xa>
 800212c:	4770      	bx	lr
 800212e:	f803 1b01 	strb.w	r1, [r3], #1
 8002132:	e7f9      	b.n	8002128 <memset+0x4>

08002134 <__libc_init_array>:
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	4d0d      	ldr	r5, [pc, #52]	; (800216c <__libc_init_array+0x38>)
 8002138:	4c0d      	ldr	r4, [pc, #52]	; (8002170 <__libc_init_array+0x3c>)
 800213a:	1b64      	subs	r4, r4, r5
 800213c:	10a4      	asrs	r4, r4, #2
 800213e:	2600      	movs	r6, #0
 8002140:	42a6      	cmp	r6, r4
 8002142:	d109      	bne.n	8002158 <__libc_init_array+0x24>
 8002144:	4d0b      	ldr	r5, [pc, #44]	; (8002174 <__libc_init_array+0x40>)
 8002146:	4c0c      	ldr	r4, [pc, #48]	; (8002178 <__libc_init_array+0x44>)
 8002148:	f000 f818 	bl	800217c <_init>
 800214c:	1b64      	subs	r4, r4, r5
 800214e:	10a4      	asrs	r4, r4, #2
 8002150:	2600      	movs	r6, #0
 8002152:	42a6      	cmp	r6, r4
 8002154:	d105      	bne.n	8002162 <__libc_init_array+0x2e>
 8002156:	bd70      	pop	{r4, r5, r6, pc}
 8002158:	f855 3b04 	ldr.w	r3, [r5], #4
 800215c:	4798      	blx	r3
 800215e:	3601      	adds	r6, #1
 8002160:	e7ee      	b.n	8002140 <__libc_init_array+0xc>
 8002162:	f855 3b04 	ldr.w	r3, [r5], #4
 8002166:	4798      	blx	r3
 8002168:	3601      	adds	r6, #1
 800216a:	e7f2      	b.n	8002152 <__libc_init_array+0x1e>
 800216c:	080021ac 	.word	0x080021ac
 8002170:	080021ac 	.word	0x080021ac
 8002174:	080021ac 	.word	0x080021ac
 8002178:	080021b0 	.word	0x080021b0

0800217c <_init>:
 800217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217e:	bf00      	nop
 8002180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002182:	bc08      	pop	{r3}
 8002184:	469e      	mov	lr, r3
 8002186:	4770      	bx	lr

08002188 <_fini>:
 8002188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218a:	bf00      	nop
 800218c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218e:	bc08      	pop	{r3}
 8002190:	469e      	mov	lr, r3
 8002192:	4770      	bx	lr
